<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Reflection.Emit" #>
<#@ output extension=".g.cs" #>
<#
var exclusions = new []
{
    OpCodes.Prefix1,
    OpCodes.Prefix2,
    OpCodes.Prefix3,
    OpCodes.Prefix4,
    OpCodes.Prefix5,
    OpCodes.Prefix6,
    OpCodes.Prefix7,
    OpCodes.Prefixref,
};
var opcodes = typeof(OpCodes)
    .GetFields()
    .Where(f => f.FieldType == typeof(OpCode))
    .Select(f => (field: f, opcode: (OpCode)f.GetValue(null)))
    .Where(tpl => !exclusions.Contains(tpl.opcode))
    .OrderBy(tpl => tpl.opcode.Value);
#>
using System;
using System.Collections.Generic;
using System.Reflection;
using System.Reflection.Emit;

namespace PowerEmit
{
    partial class PushOperationTest
    {
        public static IEnumerable<object[]> TestArgs_Basic()
        {
<#
foreach(var (field, opcode) in opcodes)
{
    var expected = GetExpectedAction(field, opcode);
    var actual = GetActualAction(field, opcode);
    if(expected is null || actual is null)
        continue;
#>
            yield return CreateArgs(
                OpCodes.<#=field.Name#>,
                <#=expected#>,
                <#=actual#>);
<#
}
#>
            yield break;
        }
    }
}
<#+


string GetExpectedAction(FieldInfo field, OpCode opcode)
{
    if(opcode == OpCodes.Calli)
    {
        return null;
    }
    if(opcode == OpCodes.Ldtoken)
    {
        return null;
    }
    if(opcode == OpCodes.Switch)
    {
        return null;
    }
    if(opcode.OperandType == OperandType.InlineBrTarget || opcode.OperandType == OperandType.ShortInlineBrTarget)
    {
        return null;
    }
    if(opcode.OperandType == OperandType.InlineNone)
    {
        return $"gen => gen.Emit(OpCodes.{field.Name})";
    }
    else
    {
        return $"gen => gen.Emit(OpCodes.{field.Name}, {GetArgValue(opcode)})";
    }
}


string GetActualAction(FieldInfo field, OpCode opcode)
{
    if(opcode == OpCodes.Calli)
    {
        return null;
    }
    if(opcode == OpCodes.Ldtoken)
    {
        return null;
    }
    if(opcode == OpCodes.Switch)
    {
        return null;
    }
    if(opcode.OperandType == OperandType.InlineBrTarget || opcode.OperandType == OperandType.ShortInlineBrTarget)
    {
        return null;
    }
    if(opcode.OperandType == OperandType.InlineNone)
    {
        return $"desc => desc.Push_{field.Name}()";
    }
    else
    {
        return $"desc => desc.Push_{field.Name}({GetArgValue(opcode)})";
    }
}


string GetArgValue(OpCode opcode)
{
    switch(opcode.OperandType)
    {
    case OperandType.InlineBrTarget:
        goto default;
    case OperandType.InlineField:
        return "MockType.FieldInfo";
    case OperandType.InlineI:
        return "default(int)";
    case OperandType.InlineI8:
        return "default(long)";
    case OperandType.InlineMethod:
        return opcode == OpCodes.Newobj
               ? "MockType.ConstructorInfo"
               : "MockType.MethodInfo";
    case OperandType.InlineNone:
        return "";
#pragma warning disable CS0618
    case OperandType.InlinePhi:
        goto default;
#pragma warning restore CS0618
    case OperandType.InlineR:
        return "default(double)";
    case OperandType.InlineSig:
        goto default;
    case OperandType.InlineString:
        return "string.Empty";
    case OperandType.InlineSwitch:
        goto default;
    case OperandType.InlineTok:
        goto default;
    case OperandType.InlineType:
        return "typeof(MockType)";
    case OperandType.InlineVar:
        return "default(short)";
    case OperandType.ShortInlineBrTarget:
        goto default;
    case OperandType.ShortInlineI:
        return opcode == OpCodes.Ldc_I4_S
            ? "default(sbyte)"
            : "default(byte)";
    case OperandType.ShortInlineR:
        return "default(float)";
    case OperandType.ShortInlineVar:
        return "default(byte)";
    default:
        return "null";
    }
}
#>