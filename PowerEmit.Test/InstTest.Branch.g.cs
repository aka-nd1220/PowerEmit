// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY T4. DO NOT CHANGE IT. CHANGE THE .tt FILE INSTEAD.
// </auto-generated>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection.Emit;
using System.Text;
using Xunit;

namespace PowerEmit
{
    public partial class InstTest
    {
        [Theory]
        [MemberData(nameof(GetTestCases_Branch))]
        public void Emit_Branch(TestCase testCase)
            => EmitCore(testCase);


        public static IEnumerable<object[]> GetTestCases_Branch()
        {
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Br_S, label);
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Br_S(label));
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Br_S(labelBuilder));
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"br.s 0",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"br.s 0 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -2; i > -3; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Br_S, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -2; i > -3; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Br_S(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -2; i > -3; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Br_S(labelBuilder));
                };

                yield return CreateTestCase(
                    $"br.s -3",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"br.s -3 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -2; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Br_S, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -2; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Br_S(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -2; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Br_S(labelBuilder));
                };

                yield return CreateTestCase(
                    $"br.s -128",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"br.s -128 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Br_S, label);
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Br_S(label));
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Br_S(labelBuilder));
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"br.s 1",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"br.s 1 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Br_S, label);
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Br_S(label));
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Br_S(labelBuilder));
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"br.s 127",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"br.s 127 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Br, label);
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Br(label));
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Br(labelBuilder));
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"br 0",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"br 0 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -6; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Br, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -6; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Br(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -5; i > -6; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Br(labelBuilder));
                };

                yield return CreateTestCase(
                    $"br -6",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"br -6 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Br, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Br(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -5; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Br(labelBuilder));
                };

                yield return CreateTestCase(
                    $"br -128",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"br -128 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -129; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Br, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -129; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Br(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -5; i > -129; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Br(labelBuilder));
                };

                yield return CreateTestCase(
                    $"br -129",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"br -129 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -32768; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Br, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -32768; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Br(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -5; i > -32768; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Br(labelBuilder));
                };

                yield return CreateTestCase(
                    $"br -32768",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"br -32768 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Br, label);
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Br(label));
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Br(labelBuilder));
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"br 1",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"br 1 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Br, label);
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Br(label));
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Br(labelBuilder));
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"br 127",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"br 127 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Br, label);
                    for(var i = 0; i < 128; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Br(label));
                    for(var i = 0; i < 128; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Br(labelBuilder));
                    for(var i = 0; i < 128; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"br 128",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"br 128 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Br, label);
                    for(var i = 0; i < 32767; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Br(label));
                    for(var i = 0; i < 32767; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Br(labelBuilder));
                    for(var i = 0; i < 32767; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"br 32767",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"br 32767 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Brfalse_S, label);
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Brfalse_S(label));
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Brfalse_S(labelBuilder));
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"brfalse.s 0",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"brfalse.s 0 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -2; i > -3; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Brfalse_S, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -2; i > -3; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Brfalse_S(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -2; i > -3; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Brfalse_S(labelBuilder));
                };

                yield return CreateTestCase(
                    $"brfalse.s -3",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"brfalse.s -3 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -2; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Brfalse_S, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -2; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Brfalse_S(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -2; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Brfalse_S(labelBuilder));
                };

                yield return CreateTestCase(
                    $"brfalse.s -128",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"brfalse.s -128 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Brfalse_S, label);
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Brfalse_S(label));
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Brfalse_S(labelBuilder));
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"brfalse.s 1",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"brfalse.s 1 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Brfalse_S, label);
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Brfalse_S(label));
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Brfalse_S(labelBuilder));
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"brfalse.s 127",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"brfalse.s 127 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Brfalse, label);
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Brfalse(label));
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Brfalse(labelBuilder));
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"brfalse 0",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"brfalse 0 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -6; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Brfalse, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -6; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Brfalse(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -5; i > -6; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Brfalse(labelBuilder));
                };

                yield return CreateTestCase(
                    $"brfalse -6",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"brfalse -6 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Brfalse, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Brfalse(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -5; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Brfalse(labelBuilder));
                };

                yield return CreateTestCase(
                    $"brfalse -128",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"brfalse -128 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -129; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Brfalse, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -129; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Brfalse(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -5; i > -129; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Brfalse(labelBuilder));
                };

                yield return CreateTestCase(
                    $"brfalse -129",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"brfalse -129 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -32768; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Brfalse, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -32768; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Brfalse(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -5; i > -32768; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Brfalse(labelBuilder));
                };

                yield return CreateTestCase(
                    $"brfalse -32768",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"brfalse -32768 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Brfalse, label);
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Brfalse(label));
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Brfalse(labelBuilder));
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"brfalse 1",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"brfalse 1 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Brfalse, label);
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Brfalse(label));
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Brfalse(labelBuilder));
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"brfalse 127",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"brfalse 127 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Brfalse, label);
                    for(var i = 0; i < 128; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Brfalse(label));
                    for(var i = 0; i < 128; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Brfalse(labelBuilder));
                    for(var i = 0; i < 128; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"brfalse 128",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"brfalse 128 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Brfalse, label);
                    for(var i = 0; i < 32767; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Brfalse(label));
                    for(var i = 0; i < 32767; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Brfalse(labelBuilder));
                    for(var i = 0; i < 32767; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"brfalse 32767",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"brfalse 32767 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Brtrue_S, label);
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Brtrue_S(label));
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Brtrue_S(labelBuilder));
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"brtrue.s 0",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"brtrue.s 0 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -2; i > -3; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Brtrue_S, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -2; i > -3; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Brtrue_S(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -2; i > -3; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Brtrue_S(labelBuilder));
                };

                yield return CreateTestCase(
                    $"brtrue.s -3",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"brtrue.s -3 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -2; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Brtrue_S, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -2; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Brtrue_S(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -2; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Brtrue_S(labelBuilder));
                };

                yield return CreateTestCase(
                    $"brtrue.s -128",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"brtrue.s -128 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Brtrue_S, label);
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Brtrue_S(label));
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Brtrue_S(labelBuilder));
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"brtrue.s 1",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"brtrue.s 1 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Brtrue_S, label);
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Brtrue_S(label));
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Brtrue_S(labelBuilder));
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"brtrue.s 127",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"brtrue.s 127 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Brtrue, label);
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Brtrue(label));
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Brtrue(labelBuilder));
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"brtrue 0",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"brtrue 0 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -6; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Brtrue, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -6; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Brtrue(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -5; i > -6; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Brtrue(labelBuilder));
                };

                yield return CreateTestCase(
                    $"brtrue -6",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"brtrue -6 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Brtrue, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Brtrue(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -5; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Brtrue(labelBuilder));
                };

                yield return CreateTestCase(
                    $"brtrue -128",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"brtrue -128 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -129; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Brtrue, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -129; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Brtrue(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -5; i > -129; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Brtrue(labelBuilder));
                };

                yield return CreateTestCase(
                    $"brtrue -129",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"brtrue -129 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -32768; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Brtrue, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -32768; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Brtrue(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -5; i > -32768; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Brtrue(labelBuilder));
                };

                yield return CreateTestCase(
                    $"brtrue -32768",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"brtrue -32768 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Brtrue, label);
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Brtrue(label));
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Brtrue(labelBuilder));
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"brtrue 1",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"brtrue 1 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Brtrue, label);
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Brtrue(label));
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Brtrue(labelBuilder));
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"brtrue 127",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"brtrue 127 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Brtrue, label);
                    for(var i = 0; i < 128; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Brtrue(label));
                    for(var i = 0; i < 128; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Brtrue(labelBuilder));
                    for(var i = 0; i < 128; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"brtrue 128",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"brtrue 128 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Brtrue, label);
                    for(var i = 0; i < 32767; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Brtrue(label));
                    for(var i = 0; i < 32767; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Brtrue(labelBuilder));
                    for(var i = 0; i < 32767; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"brtrue 32767",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"brtrue 32767 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Beq_S, label);
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Beq_S(label));
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Beq_S(labelBuilder));
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"beq.s 0",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"beq.s 0 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -2; i > -3; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Beq_S, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -2; i > -3; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Beq_S(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -2; i > -3; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Beq_S(labelBuilder));
                };

                yield return CreateTestCase(
                    $"beq.s -3",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"beq.s -3 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -2; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Beq_S, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -2; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Beq_S(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -2; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Beq_S(labelBuilder));
                };

                yield return CreateTestCase(
                    $"beq.s -128",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"beq.s -128 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Beq_S, label);
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Beq_S(label));
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Beq_S(labelBuilder));
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"beq.s 1",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"beq.s 1 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Beq_S, label);
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Beq_S(label));
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Beq_S(labelBuilder));
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"beq.s 127",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"beq.s 127 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Beq, label);
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Beq(label));
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Beq(labelBuilder));
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"beq 0",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"beq 0 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -6; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Beq, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -6; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Beq(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -5; i > -6; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Beq(labelBuilder));
                };

                yield return CreateTestCase(
                    $"beq -6",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"beq -6 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Beq, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Beq(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -5; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Beq(labelBuilder));
                };

                yield return CreateTestCase(
                    $"beq -128",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"beq -128 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -129; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Beq, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -129; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Beq(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -5; i > -129; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Beq(labelBuilder));
                };

                yield return CreateTestCase(
                    $"beq -129",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"beq -129 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -32768; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Beq, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -32768; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Beq(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -5; i > -32768; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Beq(labelBuilder));
                };

                yield return CreateTestCase(
                    $"beq -32768",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"beq -32768 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Beq, label);
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Beq(label));
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Beq(labelBuilder));
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"beq 1",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"beq 1 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Beq, label);
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Beq(label));
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Beq(labelBuilder));
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"beq 127",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"beq 127 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Beq, label);
                    for(var i = 0; i < 128; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Beq(label));
                    for(var i = 0; i < 128; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Beq(labelBuilder));
                    for(var i = 0; i < 128; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"beq 128",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"beq 128 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Beq, label);
                    for(var i = 0; i < 32767; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Beq(label));
                    for(var i = 0; i < 32767; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Beq(labelBuilder));
                    for(var i = 0; i < 32767; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"beq 32767",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"beq 32767 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Bge_S, label);
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Bge_S(label));
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Bge_S(labelBuilder));
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"bge.s 0",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bge.s 0 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -2; i > -3; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Bge_S, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -2; i > -3; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bge_S(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -2; i > -3; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bge_S(labelBuilder));
                };

                yield return CreateTestCase(
                    $"bge.s -3",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bge.s -3 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -2; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Bge_S, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -2; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bge_S(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -2; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bge_S(labelBuilder));
                };

                yield return CreateTestCase(
                    $"bge.s -128",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bge.s -128 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Bge_S, label);
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Bge_S(label));
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Bge_S(labelBuilder));
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"bge.s 1",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bge.s 1 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Bge_S, label);
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Bge_S(label));
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Bge_S(labelBuilder));
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"bge.s 127",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bge.s 127 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Bge, label);
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Bge(label));
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Bge(labelBuilder));
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"bge 0",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bge 0 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -6; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Bge, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -6; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bge(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -5; i > -6; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bge(labelBuilder));
                };

                yield return CreateTestCase(
                    $"bge -6",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bge -6 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Bge, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bge(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -5; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bge(labelBuilder));
                };

                yield return CreateTestCase(
                    $"bge -128",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bge -128 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -129; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Bge, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -129; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bge(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -5; i > -129; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bge(labelBuilder));
                };

                yield return CreateTestCase(
                    $"bge -129",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bge -129 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -32768; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Bge, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -32768; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bge(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -5; i > -32768; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bge(labelBuilder));
                };

                yield return CreateTestCase(
                    $"bge -32768",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bge -32768 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Bge, label);
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Bge(label));
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Bge(labelBuilder));
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"bge 1",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bge 1 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Bge, label);
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Bge(label));
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Bge(labelBuilder));
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"bge 127",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bge 127 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Bge, label);
                    for(var i = 0; i < 128; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Bge(label));
                    for(var i = 0; i < 128; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Bge(labelBuilder));
                    for(var i = 0; i < 128; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"bge 128",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bge 128 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Bge, label);
                    for(var i = 0; i < 32767; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Bge(label));
                    for(var i = 0; i < 32767; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Bge(labelBuilder));
                    for(var i = 0; i < 32767; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"bge 32767",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bge 32767 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Bgt_S, label);
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Bgt_S(label));
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Bgt_S(labelBuilder));
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"bgt.s 0",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bgt.s 0 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -2; i > -3; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Bgt_S, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -2; i > -3; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bgt_S(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -2; i > -3; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bgt_S(labelBuilder));
                };

                yield return CreateTestCase(
                    $"bgt.s -3",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bgt.s -3 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -2; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Bgt_S, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -2; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bgt_S(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -2; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bgt_S(labelBuilder));
                };

                yield return CreateTestCase(
                    $"bgt.s -128",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bgt.s -128 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Bgt_S, label);
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Bgt_S(label));
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Bgt_S(labelBuilder));
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"bgt.s 1",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bgt.s 1 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Bgt_S, label);
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Bgt_S(label));
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Bgt_S(labelBuilder));
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"bgt.s 127",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bgt.s 127 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Bgt, label);
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Bgt(label));
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Bgt(labelBuilder));
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"bgt 0",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bgt 0 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -6; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Bgt, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -6; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bgt(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -5; i > -6; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bgt(labelBuilder));
                };

                yield return CreateTestCase(
                    $"bgt -6",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bgt -6 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Bgt, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bgt(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -5; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bgt(labelBuilder));
                };

                yield return CreateTestCase(
                    $"bgt -128",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bgt -128 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -129; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Bgt, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -129; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bgt(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -5; i > -129; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bgt(labelBuilder));
                };

                yield return CreateTestCase(
                    $"bgt -129",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bgt -129 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -32768; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Bgt, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -32768; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bgt(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -5; i > -32768; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bgt(labelBuilder));
                };

                yield return CreateTestCase(
                    $"bgt -32768",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bgt -32768 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Bgt, label);
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Bgt(label));
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Bgt(labelBuilder));
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"bgt 1",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bgt 1 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Bgt, label);
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Bgt(label));
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Bgt(labelBuilder));
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"bgt 127",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bgt 127 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Bgt, label);
                    for(var i = 0; i < 128; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Bgt(label));
                    for(var i = 0; i < 128; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Bgt(labelBuilder));
                    for(var i = 0; i < 128; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"bgt 128",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bgt 128 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Bgt, label);
                    for(var i = 0; i < 32767; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Bgt(label));
                    for(var i = 0; i < 32767; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Bgt(labelBuilder));
                    for(var i = 0; i < 32767; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"bgt 32767",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bgt 32767 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Ble_S, label);
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Ble_S(label));
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Ble_S(labelBuilder));
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"ble.s 0",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"ble.s 0 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -2; i > -3; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Ble_S, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -2; i > -3; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Ble_S(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -2; i > -3; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Ble_S(labelBuilder));
                };

                yield return CreateTestCase(
                    $"ble.s -3",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"ble.s -3 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -2; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Ble_S, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -2; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Ble_S(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -2; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Ble_S(labelBuilder));
                };

                yield return CreateTestCase(
                    $"ble.s -128",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"ble.s -128 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Ble_S, label);
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Ble_S(label));
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Ble_S(labelBuilder));
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"ble.s 1",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"ble.s 1 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Ble_S, label);
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Ble_S(label));
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Ble_S(labelBuilder));
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"ble.s 127",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"ble.s 127 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Ble, label);
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Ble(label));
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Ble(labelBuilder));
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"ble 0",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"ble 0 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -6; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Ble, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -6; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Ble(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -5; i > -6; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Ble(labelBuilder));
                };

                yield return CreateTestCase(
                    $"ble -6",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"ble -6 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Ble, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Ble(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -5; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Ble(labelBuilder));
                };

                yield return CreateTestCase(
                    $"ble -128",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"ble -128 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -129; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Ble, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -129; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Ble(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -5; i > -129; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Ble(labelBuilder));
                };

                yield return CreateTestCase(
                    $"ble -129",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"ble -129 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -32768; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Ble, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -32768; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Ble(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -5; i > -32768; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Ble(labelBuilder));
                };

                yield return CreateTestCase(
                    $"ble -32768",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"ble -32768 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Ble, label);
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Ble(label));
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Ble(labelBuilder));
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"ble 1",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"ble 1 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Ble, label);
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Ble(label));
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Ble(labelBuilder));
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"ble 127",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"ble 127 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Ble, label);
                    for(var i = 0; i < 128; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Ble(label));
                    for(var i = 0; i < 128; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Ble(labelBuilder));
                    for(var i = 0; i < 128; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"ble 128",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"ble 128 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Ble, label);
                    for(var i = 0; i < 32767; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Ble(label));
                    for(var i = 0; i < 32767; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Ble(labelBuilder));
                    for(var i = 0; i < 32767; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"ble 32767",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"ble 32767 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Blt_S, label);
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Blt_S(label));
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Blt_S(labelBuilder));
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"blt.s 0",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"blt.s 0 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -2; i > -3; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Blt_S, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -2; i > -3; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Blt_S(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -2; i > -3; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Blt_S(labelBuilder));
                };

                yield return CreateTestCase(
                    $"blt.s -3",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"blt.s -3 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -2; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Blt_S, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -2; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Blt_S(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -2; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Blt_S(labelBuilder));
                };

                yield return CreateTestCase(
                    $"blt.s -128",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"blt.s -128 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Blt_S, label);
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Blt_S(label));
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Blt_S(labelBuilder));
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"blt.s 1",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"blt.s 1 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Blt_S, label);
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Blt_S(label));
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Blt_S(labelBuilder));
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"blt.s 127",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"blt.s 127 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Blt, label);
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Blt(label));
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Blt(labelBuilder));
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"blt 0",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"blt 0 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -6; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Blt, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -6; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Blt(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -5; i > -6; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Blt(labelBuilder));
                };

                yield return CreateTestCase(
                    $"blt -6",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"blt -6 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Blt, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Blt(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -5; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Blt(labelBuilder));
                };

                yield return CreateTestCase(
                    $"blt -128",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"blt -128 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -129; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Blt, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -129; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Blt(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -5; i > -129; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Blt(labelBuilder));
                };

                yield return CreateTestCase(
                    $"blt -129",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"blt -129 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -32768; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Blt, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -32768; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Blt(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -5; i > -32768; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Blt(labelBuilder));
                };

                yield return CreateTestCase(
                    $"blt -32768",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"blt -32768 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Blt, label);
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Blt(label));
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Blt(labelBuilder));
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"blt 1",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"blt 1 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Blt, label);
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Blt(label));
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Blt(labelBuilder));
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"blt 127",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"blt 127 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Blt, label);
                    for(var i = 0; i < 128; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Blt(label));
                    for(var i = 0; i < 128; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Blt(labelBuilder));
                    for(var i = 0; i < 128; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"blt 128",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"blt 128 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Blt, label);
                    for(var i = 0; i < 32767; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Blt(label));
                    for(var i = 0; i < 32767; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Blt(labelBuilder));
                    for(var i = 0; i < 32767; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"blt 32767",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"blt 32767 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Bne_Un_S, label);
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Bne_Un_S(label));
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Bne_Un_S(labelBuilder));
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"bne.un.s 0",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bne.un.s 0 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -2; i > -3; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Bne_Un_S, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -2; i > -3; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bne_Un_S(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -2; i > -3; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bne_Un_S(labelBuilder));
                };

                yield return CreateTestCase(
                    $"bne.un.s -3",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bne.un.s -3 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -2; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Bne_Un_S, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -2; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bne_Un_S(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -2; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bne_Un_S(labelBuilder));
                };

                yield return CreateTestCase(
                    $"bne.un.s -128",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bne.un.s -128 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Bne_Un_S, label);
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Bne_Un_S(label));
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Bne_Un_S(labelBuilder));
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"bne.un.s 1",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bne.un.s 1 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Bne_Un_S, label);
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Bne_Un_S(label));
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Bne_Un_S(labelBuilder));
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"bne.un.s 127",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bne.un.s 127 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Bne_Un, label);
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Bne_Un(label));
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Bne_Un(labelBuilder));
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"bne.un 0",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bne.un 0 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -6; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Bne_Un, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -6; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bne_Un(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -5; i > -6; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bne_Un(labelBuilder));
                };

                yield return CreateTestCase(
                    $"bne.un -6",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bne.un -6 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Bne_Un, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bne_Un(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -5; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bne_Un(labelBuilder));
                };

                yield return CreateTestCase(
                    $"bne.un -128",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bne.un -128 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -129; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Bne_Un, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -129; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bne_Un(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -5; i > -129; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bne_Un(labelBuilder));
                };

                yield return CreateTestCase(
                    $"bne.un -129",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bne.un -129 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -32768; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Bne_Un, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -32768; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bne_Un(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -5; i > -32768; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bne_Un(labelBuilder));
                };

                yield return CreateTestCase(
                    $"bne.un -32768",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bne.un -32768 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Bne_Un, label);
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Bne_Un(label));
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Bne_Un(labelBuilder));
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"bne.un 1",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bne.un 1 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Bne_Un, label);
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Bne_Un(label));
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Bne_Un(labelBuilder));
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"bne.un 127",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bne.un 127 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Bne_Un, label);
                    for(var i = 0; i < 128; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Bne_Un(label));
                    for(var i = 0; i < 128; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Bne_Un(labelBuilder));
                    for(var i = 0; i < 128; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"bne.un 128",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bne.un 128 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Bne_Un, label);
                    for(var i = 0; i < 32767; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Bne_Un(label));
                    for(var i = 0; i < 32767; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Bne_Un(labelBuilder));
                    for(var i = 0; i < 32767; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"bne.un 32767",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bne.un 32767 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Bge_Un_S, label);
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Bge_Un_S(label));
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Bge_Un_S(labelBuilder));
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"bge.un.s 0",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bge.un.s 0 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -2; i > -3; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Bge_Un_S, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -2; i > -3; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bge_Un_S(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -2; i > -3; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bge_Un_S(labelBuilder));
                };

                yield return CreateTestCase(
                    $"bge.un.s -3",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bge.un.s -3 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -2; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Bge_Un_S, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -2; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bge_Un_S(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -2; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bge_Un_S(labelBuilder));
                };

                yield return CreateTestCase(
                    $"bge.un.s -128",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bge.un.s -128 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Bge_Un_S, label);
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Bge_Un_S(label));
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Bge_Un_S(labelBuilder));
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"bge.un.s 1",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bge.un.s 1 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Bge_Un_S, label);
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Bge_Un_S(label));
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Bge_Un_S(labelBuilder));
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"bge.un.s 127",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bge.un.s 127 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Bge_Un, label);
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Bge_Un(label));
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Bge_Un(labelBuilder));
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"bge.un 0",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bge.un 0 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -6; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Bge_Un, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -6; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bge_Un(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -5; i > -6; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bge_Un(labelBuilder));
                };

                yield return CreateTestCase(
                    $"bge.un -6",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bge.un -6 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Bge_Un, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bge_Un(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -5; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bge_Un(labelBuilder));
                };

                yield return CreateTestCase(
                    $"bge.un -128",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bge.un -128 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -129; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Bge_Un, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -129; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bge_Un(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -5; i > -129; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bge_Un(labelBuilder));
                };

                yield return CreateTestCase(
                    $"bge.un -129",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bge.un -129 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -32768; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Bge_Un, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -32768; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bge_Un(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -5; i > -32768; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bge_Un(labelBuilder));
                };

                yield return CreateTestCase(
                    $"bge.un -32768",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bge.un -32768 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Bge_Un, label);
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Bge_Un(label));
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Bge_Un(labelBuilder));
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"bge.un 1",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bge.un 1 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Bge_Un, label);
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Bge_Un(label));
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Bge_Un(labelBuilder));
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"bge.un 127",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bge.un 127 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Bge_Un, label);
                    for(var i = 0; i < 128; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Bge_Un(label));
                    for(var i = 0; i < 128; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Bge_Un(labelBuilder));
                    for(var i = 0; i < 128; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"bge.un 128",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bge.un 128 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Bge_Un, label);
                    for(var i = 0; i < 32767; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Bge_Un(label));
                    for(var i = 0; i < 32767; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Bge_Un(labelBuilder));
                    for(var i = 0; i < 32767; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"bge.un 32767",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bge.un 32767 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Bgt_Un_S, label);
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Bgt_Un_S(label));
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Bgt_Un_S(labelBuilder));
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"bgt.un.s 0",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bgt.un.s 0 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -2; i > -3; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Bgt_Un_S, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -2; i > -3; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bgt_Un_S(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -2; i > -3; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bgt_Un_S(labelBuilder));
                };

                yield return CreateTestCase(
                    $"bgt.un.s -3",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bgt.un.s -3 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -2; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Bgt_Un_S, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -2; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bgt_Un_S(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -2; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bgt_Un_S(labelBuilder));
                };

                yield return CreateTestCase(
                    $"bgt.un.s -128",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bgt.un.s -128 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Bgt_Un_S, label);
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Bgt_Un_S(label));
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Bgt_Un_S(labelBuilder));
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"bgt.un.s 1",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bgt.un.s 1 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Bgt_Un_S, label);
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Bgt_Un_S(label));
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Bgt_Un_S(labelBuilder));
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"bgt.un.s 127",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bgt.un.s 127 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Bgt_Un, label);
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Bgt_Un(label));
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Bgt_Un(labelBuilder));
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"bgt.un 0",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bgt.un 0 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -6; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Bgt_Un, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -6; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bgt_Un(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -5; i > -6; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bgt_Un(labelBuilder));
                };

                yield return CreateTestCase(
                    $"bgt.un -6",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bgt.un -6 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Bgt_Un, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bgt_Un(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -5; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bgt_Un(labelBuilder));
                };

                yield return CreateTestCase(
                    $"bgt.un -128",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bgt.un -128 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -129; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Bgt_Un, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -129; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bgt_Un(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -5; i > -129; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bgt_Un(labelBuilder));
                };

                yield return CreateTestCase(
                    $"bgt.un -129",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bgt.un -129 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -32768; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Bgt_Un, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -32768; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bgt_Un(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -5; i > -32768; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Bgt_Un(labelBuilder));
                };

                yield return CreateTestCase(
                    $"bgt.un -32768",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bgt.un -32768 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Bgt_Un, label);
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Bgt_Un(label));
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Bgt_Un(labelBuilder));
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"bgt.un 1",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bgt.un 1 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Bgt_Un, label);
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Bgt_Un(label));
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Bgt_Un(labelBuilder));
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"bgt.un 127",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bgt.un 127 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Bgt_Un, label);
                    for(var i = 0; i < 128; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Bgt_Un(label));
                    for(var i = 0; i < 128; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Bgt_Un(labelBuilder));
                    for(var i = 0; i < 128; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"bgt.un 128",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bgt.un 128 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Bgt_Un, label);
                    for(var i = 0; i < 32767; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Bgt_Un(label));
                    for(var i = 0; i < 32767; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Bgt_Un(labelBuilder));
                    for(var i = 0; i < 32767; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"bgt.un 32767",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"bgt.un 32767 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Ble_Un_S, label);
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Ble_Un_S(label));
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Ble_Un_S(labelBuilder));
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"ble.un.s 0",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"ble.un.s 0 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -2; i > -3; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Ble_Un_S, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -2; i > -3; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Ble_Un_S(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -2; i > -3; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Ble_Un_S(labelBuilder));
                };

                yield return CreateTestCase(
                    $"ble.un.s -3",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"ble.un.s -3 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -2; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Ble_Un_S, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -2; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Ble_Un_S(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -2; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Ble_Un_S(labelBuilder));
                };

                yield return CreateTestCase(
                    $"ble.un.s -128",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"ble.un.s -128 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Ble_Un_S, label);
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Ble_Un_S(label));
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Ble_Un_S(labelBuilder));
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"ble.un.s 1",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"ble.un.s 1 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Ble_Un_S, label);
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Ble_Un_S(label));
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Ble_Un_S(labelBuilder));
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"ble.un.s 127",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"ble.un.s 127 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Ble_Un, label);
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Ble_Un(label));
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Ble_Un(labelBuilder));
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"ble.un 0",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"ble.un 0 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -6; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Ble_Un, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -6; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Ble_Un(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -5; i > -6; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Ble_Un(labelBuilder));
                };

                yield return CreateTestCase(
                    $"ble.un -6",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"ble.un -6 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Ble_Un, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Ble_Un(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -5; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Ble_Un(labelBuilder));
                };

                yield return CreateTestCase(
                    $"ble.un -128",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"ble.un -128 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -129; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Ble_Un, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -129; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Ble_Un(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -5; i > -129; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Ble_Un(labelBuilder));
                };

                yield return CreateTestCase(
                    $"ble.un -129",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"ble.un -129 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -32768; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Ble_Un, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -32768; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Ble_Un(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -5; i > -32768; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Ble_Un(labelBuilder));
                };

                yield return CreateTestCase(
                    $"ble.un -32768",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"ble.un -32768 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Ble_Un, label);
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Ble_Un(label));
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Ble_Un(labelBuilder));
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"ble.un 1",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"ble.un 1 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Ble_Un, label);
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Ble_Un(label));
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Ble_Un(labelBuilder));
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"ble.un 127",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"ble.un 127 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Ble_Un, label);
                    for(var i = 0; i < 128; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Ble_Un(label));
                    for(var i = 0; i < 128; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Ble_Un(labelBuilder));
                    for(var i = 0; i < 128; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"ble.un 128",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"ble.un 128 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Ble_Un, label);
                    for(var i = 0; i < 32767; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Ble_Un(label));
                    for(var i = 0; i < 32767; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Ble_Un(labelBuilder));
                    for(var i = 0; i < 32767; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"ble.un 32767",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"ble.un 32767 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Blt_Un_S, label);
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Blt_Un_S(label));
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Blt_Un_S(labelBuilder));
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"blt.un.s 0",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"blt.un.s 0 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -2; i > -3; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Blt_Un_S, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -2; i > -3; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Blt_Un_S(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -2; i > -3; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Blt_Un_S(labelBuilder));
                };

                yield return CreateTestCase(
                    $"blt.un.s -3",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"blt.un.s -3 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -2; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Blt_Un_S, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -2; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Blt_Un_S(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -2; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Blt_Un_S(labelBuilder));
                };

                yield return CreateTestCase(
                    $"blt.un.s -128",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"blt.un.s -128 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Blt_Un_S, label);
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Blt_Un_S(label));
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Blt_Un_S(labelBuilder));
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"blt.un.s 1",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"blt.un.s 1 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Blt_Un_S, label);
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Blt_Un_S(label));
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Blt_Un_S(labelBuilder));
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"blt.un.s 127",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"blt.un.s 127 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Blt_Un, label);
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Blt_Un(label));
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Blt_Un(labelBuilder));
                    for(var i = 0; i < 0; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"blt.un 0",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"blt.un 0 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -6; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Blt_Un, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -6; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Blt_Un(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -5; i > -6; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Blt_Un(labelBuilder));
                };

                yield return CreateTestCase(
                    $"blt.un -6",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"blt.un -6 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Blt_Un, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Blt_Un(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -5; i > -128; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Blt_Un(labelBuilder));
                };

                yield return CreateTestCase(
                    $"blt.un -128",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"blt.un -128 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -129; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Blt_Un, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -129; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Blt_Un(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -5; i > -129; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Blt_Un(labelBuilder));
                };

                yield return CreateTestCase(
                    $"blt.un -129",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"blt.un -129 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -32768; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(OpCodes.Blt_Un, label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.MarkLabel(label);
                    for(var i = -5; i > -32768; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Blt_Un(label));
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    labelBuilder.MarkLabel(gen);
                    for(var i = -5; i > -32768; --i)
                        gen.Emit(OpCodes.Nop);
                    gen.Emit(Inst.Blt_Un(labelBuilder));
                };

                yield return CreateTestCase(
                    $"blt.un -32768",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"blt.un -32768 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Blt_Un, label);
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Blt_Un(label));
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Blt_Un(labelBuilder));
                    for(var i = 0; i < 1; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"blt.un 1",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"blt.un 1 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Blt_Un, label);
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Blt_Un(label));
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Blt_Un(labelBuilder));
                    for(var i = 0; i < 127; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"blt.un 127",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"blt.un 127 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Blt_Un, label);
                    for(var i = 0; i < 128; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Blt_Un(label));
                    for(var i = 0; i < 128; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Blt_Un(labelBuilder));
                    for(var i = 0; i < 128; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"blt.un 128",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"blt.un 128 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            {
                Action<ILGenerator> expected = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(OpCodes.Blt_Un, label);
                    for(var i = 0; i < 32767; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_label = gen => {
                    var label = gen.DefineLabel();
                    gen.Emit(Inst.Blt_Un(label));
                    for(var i = 0; i < 32767; ++i)
                        gen.Emit(OpCodes.Nop);
                    gen.MarkLabel(label);
                };
                Action<ILGenerator> actual_labelBuilder = gen => {
                    var labelBuilder = new LabelBuilder("test label");
                    gen.Emit(Inst.Blt_Un(labelBuilder));
                    for(var i = 0; i < 32767; ++i)
                        gen.Emit(OpCodes.Nop);
                    labelBuilder.MarkLabel(gen);
                };

                yield return CreateTestCase(
                    $"blt.un 32767",
                    expected,
                    actual_label);
                yield return CreateTestCase(
                    $"blt.un 32767 (builder)",
                    expected,
                    actual_labelBuilder);
            }
            yield break;
        }
    }
}
