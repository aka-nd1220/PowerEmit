<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".g.cs" #>
<#
#nullable enable
var testCases = new (string, string, string?)[]
{
    ("nop"           , "Nop"           , null),
    ("break"         , "Break"         , null),
    ("ldarg.0"       , "Ldarg_0"       , null),
    ("ldarg.1"       , "Ldarg_1"       , null),
    ("ldarg.2"       , "Ldarg_2"       , null),
    ("ldarg.3"       , "Ldarg_3"       , null),
    ("ldloc.0"       , "Ldloc_0"       , null),
    ("ldloc.1"       , "Ldloc_1"       , null),
    ("ldloc.2"       , "Ldloc_2"       , null),
    ("ldloc.3"       , "Ldloc_3"       , null),
    ("stloc.0"       , "Stloc_0"       , null),
    ("stloc.1"       , "Stloc_1"       , null),
    ("stloc.2"       , "Stloc_2"       , null),
    ("stloc.3"       , "Stloc_3"       , null),
    ("ldarg.s"       , "Ldarg_S"       , "byte.MaxValue"),
    ("ldarga.s"      , "Ldarga_S"      , "byte.MaxValue"),
    ("starg.s"       , "Starg_S"       , "byte.MaxValue"),
    ("ldloc.s"       , "Ldloc_S"       , "byte.MaxValue"),
    ("ldloca.s"      , "Ldloca_S"      , "byte.MaxValue"),
    ("stloc.s"       , "Stloc_S"       , "byte.MaxValue"),
    ("ldnull"        , "Ldnull"        , null),
    ("ldc.i4.m1"     , "Ldc_I4_M1"     , null),
    ("ldc.i4.0"      , "Ldc_I4_0"      , null),
    ("ldc.i4.1"      , "Ldc_I4_1"      , null),
    ("ldc.i4.2"      , "Ldc_I4_2"      , null),
    ("ldc.i4.3"      , "Ldc_I4_3"      , null),
    ("ldc.i4.4"      , "Ldc_I4_4"      , null),
    ("ldc.i4.5"      , "Ldc_I4_5"      , null),
    ("ldc.i4.6"      , "Ldc_I4_6"      , null),
    ("ldc.i4.7"      , "Ldc_I4_7"      , null),
    ("ldc.i4.8"      , "Ldc_I4_8"      , null),
    ("ldc.i4.s"      , "Ldc_I4_S"      , "sbyte.MaxValue" ),
    ("ldc.i4"        , "Ldc_I4"        , "int.MaxValue"   ),
    ("ldc.i8"        , "Ldc_I8"        , "long.MaxValue"  ),
    ("ldc.r4"        , "Ldc_R4"        , "float.MaxValue" ),
    ("ldc.r8"        , "Ldc_R8"        , "double.MaxValue"),
    ("dup"           , "Dup"           , null),
    ("pop"           , "Pop"           , null),
    ("jmp"           , "Jmp"           , "MockType.MethodInfo"),
    ("call"          , "Call"          , "MockType.MethodInfo"),
//  ("calli"         , "Calli"         , "InlineSig"),
    ("ret"           , "Ret"           , null),
//  ("br.s"          , "Br_S"          , null),
//  ("brfalse.s"     , "Brfalse_S"     , null),
//  ("brtrue.s"      , "Brtrue_S"      , null),
//  ("beq.s"         , "Beq_S"         , null),
//  ("bge.s"         , "Bge_S"         , null),
//  ("bgt.s"         , "Bgt_S"         , null),
//  ("ble.s"         , "Ble_S"         , null),
//  ("blt.s"         , "Blt_S"         , null),
//  ("bne.un.s"      , "Bne_Un_S"      , null),
//  ("bge.un.s"      , "Bge_Un_S"      , null),
//  ("bgt.un.s"      , "Bgt_Un_S"      , null),
//  ("ble.un.s"      , "Ble_Un_S"      , null),
//  ("blt.un.s"      , "Blt_Un_S"      , null),
//  ("br"            , "Br"            , null),
//  ("brfalse"       , "Brfalse"       , null),
//  ("brtrue"        , "Brtrue"        , null),
//  ("beq"           , "Beq"           , null),
//  ("bge"           , "Bge"           , null),
//  ("bgt"           , "Bgt"           , null),
//  ("ble"           , "Ble"           , null),
//  ("blt"           , "Blt"           , null),
//  ("bne.un"        , "Bne_Un"        , null),
//  ("bge.un"        , "Bge_Un"        , null),
//  ("bgt.un"        , "Bgt_Un"        , null),
//  ("ble.un"        , "Ble_Un"        , null),
//  ("blt.un"        , "Blt_Un"        , null),
//  ("switch"        , "Switch"        , null),
    ("ldind.i1"      , "Ldind_I1"      , null),
    ("ldind.u1"      , "Ldind_U1"      , null),
    ("ldind.i2"      , "Ldind_I2"      , null),
    ("ldind.u2"      , "Ldind_U2"      , null),
    ("ldind.i4"      , "Ldind_I4"      , null),
    ("ldind.u4"      , "Ldind_U4"      , null),
    ("ldind.i8"      , "Ldind_I8"      , null),
    ("ldind.i"       , "Ldind_I"       , null),
    ("ldind.r4"      , "Ldind_R4"      , null),
    ("ldind.r8"      , "Ldind_R8"      , null),
    ("ldind.ref"     , "Ldind_Ref"     , null),
    ("stind.ref"     , "Stind_Ref"     , null),
    ("stind.i1"      , "Stind_I1"      , null),
    ("stind.i2"      , "Stind_I2"      , null),
    ("stind.i4"      , "Stind_I4"      , null),
    ("stind.i8"      , "Stind_I8"      , null),
    ("stind.r4"      , "Stind_R4"      , null),
    ("stind.r8"      , "Stind_R8"      , null),
    ("add"           , "Add"           , null),
    ("sub"           , "Sub"           , null),
    ("mul"           , "Mul"           , null),
    ("div"           , "Div"           , null),
    ("div.un"        , "Div_Un"        , null),
    ("rem"           , "Rem"           , null),
    ("rem.un"        , "Rem_Un"        , null),
    ("and"           , "And"           , null),
    ("or"            , "Or"            , null),
    ("xor"           , "Xor"           , null),
    ("shl"           , "Shl"           , null),
    ("shr"           , "Shr"           , null),
    ("shr.un"        , "Shr_Un"        , null),
    ("neg"           , "Neg"           , null),
    ("not"           , "Not"           , null),
    ("conv.i1"       , "Conv_I1"       , null),
    ("conv.i2"       , "Conv_I2"       , null),
    ("conv.i4"       , "Conv_I4"       , null),
    ("conv.i8"       , "Conv_I8"       , null),
    ("conv.r4"       , "Conv_R4"       , null),
    ("conv.r8"       , "Conv_R8"       , null),
    ("conv.u4"       , "Conv_U4"       , null),
    ("conv.u8"       , "Conv_U8"       , null),
    ("callvirt"      , "Callvirt"      , "MockType.MethodInfo"),
    ("cpobj"         , "Cpobj"         , "MockType.Type"),
    ("ldobj"         , "Ldobj"         , "MockType.Type"),
    ("ldstr"         , "Ldstr"         , "\"foobar\""),
    ("newobj"        , "Newobj"        , "MockType.ConstructorInfo"),
    ("castclass"     , "Castclass"     , "MockType.Type"),
    ("isinst"        , "Isinst"        , "MockType.Type"),
    ("conv.r.un"     , "Conv_R_Un"     , null),
    ("unbox"         , "Unbox"         , "MockType.Type"),
    ("throw"         , "Throw"         , null),
    ("ldfld"         , "Ldfld"         , "MockType.InstanceFieldInfo"),
    ("ldflda"        , "Ldflda"        , "MockType.InstanceFieldInfo"),
    ("stfld"         , "Stfld"         , "MockType.InstanceFieldInfo"),
    ("ldsfld"        , "Ldsfld"        , "MockType.StaticFieldInfo"),
    ("ldsflda"       , "Ldsflda"       , "MockType.StaticFieldInfo"),
    ("stsfld"        , "Stsfld"        , "MockType.StaticFieldInfo"),
    ("stobj"         , "Stobj"         , "MockType.Type"),
    ("conv.ovf.i1.un", "Conv_Ovf_I1_Un", null),
    ("conv.ovf.i2.un", "Conv_Ovf_I2_Un", null),
    ("conv.ovf.i4.un", "Conv_Ovf_I4_Un", null),
    ("conv.ovf.i8.un", "Conv_Ovf_I8_Un", null),
    ("conv.ovf.u1.un", "Conv_Ovf_U1_Un", null),
    ("conv.ovf.u2.un", "Conv_Ovf_U2_Un", null),
    ("conv.ovf.u4.un", "Conv_Ovf_U4_Un", null),
    ("conv.ovf.u8.un", "Conv_Ovf_U8_Un", null),
    ("conv.ovf.i.un" , "Conv_Ovf_I_Un" , null),
    ("conv.ovf.u.un" , "Conv_Ovf_U_Un" , null),
    ("box"           , "Box"           , "MockType.Type"),
    ("newarr"        , "Newarr"        , "MockType.Type"),
    ("ldlen"         , "Ldlen"         , null),
    ("ldelema"       , "Ldelema"       , "MockType.Type"),
    ("ldelem.i1"     , "Ldelem_I1"     , null),
    ("ldelem.u1"     , "Ldelem_U1"     , null),
    ("ldelem.i2"     , "Ldelem_I2"     , null),
    ("ldelem.u2"     , "Ldelem_U2"     , null),
    ("ldelem.i4"     , "Ldelem_I4"     , null),
    ("ldelem.u4"     , "Ldelem_U4"     , null),
    ("ldelem.i8"     , "Ldelem_I8"     , null),
    ("ldelem.i"      , "Ldelem_I"      , null),
    ("ldelem.r4"     , "Ldelem_R4"     , null),
    ("ldelem.r8"     , "Ldelem_R8"     , null),
    ("ldelem.ref"    , "Ldelem_Ref"    , null),
    ("stelem.i"      , "Stelem_I"      , null),
    ("stelem.i1"     , "Stelem_I1"     , null),
    ("stelem.i2"     , "Stelem_I2"     , null),
    ("stelem.i4"     , "Stelem_I4"     , null),
    ("stelem.i8"     , "Stelem_I8"     , null),
    ("stelem.r4"     , "Stelem_R4"     , null),
    ("stelem.r8"     , "Stelem_R8"     , null),
    ("stelem.ref"    , "Stelem_Ref"    , null),
    ("ldelem"        , "Ldelem"        , "MockType.Type"),
    ("stelem"        , "Stelem"        , "MockType.Type"),
    ("unbox.any"     , "Unbox_Any"     , "MockType.Type"),
    ("conv.ovf.i1"   , "Conv_Ovf_I1"   , null),
    ("conv.ovf.u1"   , "Conv_Ovf_U1"   , null),
    ("conv.ovf.i2"   , "Conv_Ovf_I2"   , null),
    ("conv.ovf.u2"   , "Conv_Ovf_U2"   , null),
    ("conv.ovf.i4"   , "Conv_Ovf_I4"   , null),
    ("conv.ovf.u4"   , "Conv_Ovf_U4"   , null),
    ("conv.ovf.i8"   , "Conv_Ovf_I8"   , null),
    ("conv.ovf.u8"   , "Conv_Ovf_U8"   , null),
    ("refanyval"     , "Refanyval"     , "MockType.Type"),
    ("ckfinite"      , "Ckfinite"      , null),
    ("mkrefany"      , "Mkrefany"      , "MockType.Type"),
//  ("ldtoken"       , "Ldtoken"       , "InlineTok"),
    ("conv.u2"       , "Conv_U2"       , null),
    ("conv.u1"       , "Conv_U1"       , null),
    ("conv.i"        , "Conv_I"        , null),
    ("conv.ovf.i"    , "Conv_Ovf_I"    , null),
    ("conv.ovf.u"    , "Conv_Ovf_U"    , null),
    ("add.ovf"       , "Add_Ovf"       , null),
    ("add.ovf.un"    , "Add_Ovf_Un"    , null),
    ("mul.ovf"       , "Mul_Ovf"       , null),
    ("mul.ovf.un"    , "Mul_Ovf_Un"    , null),
    ("sub.ovf"       , "Sub_Ovf"       , null),
    ("sub.ovf.un"    , "Sub_Ovf_Un"    , null),
    ("endfinally"    , "Endfinally"    , null),
    // ("leave"         , "Leave"         , "InlineBrTarget"),
    // ("leave.s"       , "Leave_S"       , "ShortInlineBrTarget"),
    ("stind.i"       , "Stind_I"       , null),
    ("conv.u"        , "Conv_U"        , null),
    ("arglist"       , "Arglist"       , null),
    ("ceq"           , "Ceq"           , null),
    ("cgt"           , "Cgt"           , null),
    ("cgt.un"        , "Cgt_Un"        , null),
    ("clt"           , "Clt"           , null),
    ("clt.un"        , "Clt_Un"        , null),
    ("ldftn"         , "Ldftn"         , "MockType.MethodInfo"),
    ("ldvirtftn"     , "Ldvirtftn"     , "MockType.MethodInfo"),
    ("ldarg"         , "Ldarg"         , "unchecked((short)ushort.MaxValue)"),
    ("ldarga"        , "Ldarga"        , "unchecked((short)ushort.MaxValue)"),
    ("starg"         , "Starg"         , "unchecked((short)ushort.MaxValue)"),
    ("ldloc"         , "Ldloc"         , "unchecked((short)ushort.MaxValue)"),
    ("ldloca"        , "Ldloca"        , "unchecked((short)ushort.MaxValue)"),
    ("stloc"         , "Stloc"         , "unchecked((short)ushort.MaxValue)"),
    ("localloc"      , "Localloc"      , null),
    ("endfilter"     , "Endfilter"     , null),
    ("unaligned."    , "Unaligned"     , "byte.MaxValue"),
    ("volatile."     , "Volatile"      , null),
    ("tail."         , "Tailcall"      , null),
    ("initobj"       , "Initobj"       , "MockType.Type"),
    ("constrained."  , "Constrained"   , "MockType.Type"),
    ("cpblk"         , "Cpblk"         , null),
    ("initblk"       , "Initblk"       , null),
    ("rethrow"       , "Rethrow"       , null),
    ("sizeof"        , "Sizeof"        , "MockType.Type"),
    ("refanytype"    , "Refanytype"    , null),
    ("readonly."     , "Readonly"      , null),
};
#>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY T4. DO NOT CHANGE IT. CHANGE THE .tt FILE INSTEAD.
// </auto-generated>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection.Emit;
using System.Text;
using Xunit;

namespace PowerEmit.Disassemblers
{
    public partial class ILDisassemblerTest
    {
        [Theory]
        [MemberData(nameof(GetTestCases_Basic))]
        public void Disassemble_Basic(TestCase testCase)
            => DisassembleCore(testCase);


        public static IEnumerable<object[]> GetTestCases_Basic()
        {
<#  foreach(var (lName, uName, operand) in testCases) { #>
            yield return CreateTestCase(
                "<#=lName#>",
                gen => <#=GetExpected(uName, operand)#>
                );
<#  } #>
            yield break;
        }
    }
}
<#+
string GetExpected(string uName, string? operand)
    => operand is not null
        ? $"gen.Emit(OpCodes.{uName}, {operand})"
        : $"gen.Emit(OpCodes.{uName})";
#>