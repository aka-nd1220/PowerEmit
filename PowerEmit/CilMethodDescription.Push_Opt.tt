<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".g.cs" #>
<#
var opcodes = new []
{
    new OpCodeInfo("Ldarg_Opt"  , "CilArgument", "argument"),
    new OpCodeInfo("Ldc_I4_Opt" , "int"        , "value"   ),
    new OpCodeInfo("Ldloc_Opt"  , "CilLocal"   , "local"   ),
    new OpCodeInfo("Starg_Opt"  , "CilArgument", "argument"),
    new OpCodeInfo("Stloc_Opt"  , "CilLocal"   , "local"   ),
    new OpCodeInfo("Br_Opt"     , "CilLabel"   , "label"   ),
    new OpCodeInfo("Brfalse_Opt", "CilLabel"   , "label"   ),
    new OpCodeInfo("Brtrue_Opt" , "CilLabel"   , "label"   ),
    new OpCodeInfo("Beq_Opt"    , "CilLabel"   , "label"   ),
    new OpCodeInfo("Bge_Opt"    , "CilLabel"   , "label"   ),
    new OpCodeInfo("Bgt_Opt"    , "CilLabel"   , "label"   ),
    new OpCodeInfo("Ble_Opt"    , "CilLabel"   , "label"   ),
    new OpCodeInfo("Blt_Opt"    , "CilLabel"   , "label"   ),
    new OpCodeInfo("Leave_Opt"  , "CilLabel"   , "label"   ),
};
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Reflection.Emit;
using PowerEmit.Emit.Linq;

namespace PowerEmit.Emit
{
    partial class CilMethodDescription
    {
<#
foreach(var opcode in opcodes)
{
#>

        public <#=opcode.Name#> Push_<#=opcode.Name#>(<#=opcode.ArgType#> <#=opcode.ArgName#>)
        {
            var result = new <#=opcode.Name#>(<#=opcode.ArgName#>);
            _operations.Add(result);
            return result;
        }

<#
}
#>
    }
}
<#+
struct OpCodeInfo
{
    public string Name { get; }
    public string ArgType { get; }
    public string ArgName { get; }

    public OpCodeInfo(string name, string argType, string argName)
    {
        Name = name;
        ArgType = argType;
        ArgName = argName;
    }
}

#>