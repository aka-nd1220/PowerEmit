<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ output extension=".g.cs" #>
<#
var opcodes = new []
{
    new OpCodeInfo("Br_S"     ),
    new OpCodeInfo("Brfalse_S"),
    new OpCodeInfo("Brtrue_S" ),
    new OpCodeInfo("Beq_S"    ),
    new OpCodeInfo("Bge_S"    ),
    new OpCodeInfo("Bgt_S"    ),
    new OpCodeInfo("Ble_S"    ),
    new OpCodeInfo("Blt_S"    ),
    new OpCodeInfo("Bne_Un_S" ),
    new OpCodeInfo("Bge_Un_S" ),
    new OpCodeInfo("Bgt_Un_S" ),
    new OpCodeInfo("Ble_Un_S" ),
    new OpCodeInfo("Blt_Un_S" ),
    new OpCodeInfo("Br"       ),
    new OpCodeInfo("Brfalse"  ),
    new OpCodeInfo("Brtrue"   ),
    new OpCodeInfo("Beq"      ),
    new OpCodeInfo("Bge"      ),
    new OpCodeInfo("Bgt"      ),
    new OpCodeInfo("Ble"      ),
    new OpCodeInfo("Blt"      ),
    new OpCodeInfo("Bne_Un"   ),
    new OpCodeInfo("Bge_Un"   ),
    new OpCodeInfo("Bgt_Un"   ),
    new OpCodeInfo("Ble_Un"   ),
    new OpCodeInfo("Blt_Un"   ),
    new OpCodeInfo("Leave_S"  ),
    new OpCodeInfo("Leave"    ),
};
#>
using System;
using System.Collections.Generic;
using System.Reflection;
using System.Reflection.Emit;

namespace PowerEmit.Emit
{
<#
foreach(var opcode in opcodes)
{
#>

    public sealed class <#=opcode.Name#> : BranchOperation
    {
        public override OpCode OpCode => OpCodes.<#=opcode.Name#>;
        internal <#=opcode.Name#>(CilLabel operand) : base(operand) {}
    }

<#
}
#>
}
<#+
public struct OpCodeInfo
{
    public string Name { get; }

    public OpCodeInfo(string name)
    {
        Name = name;
    }
}
#>