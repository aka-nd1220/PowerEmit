// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY T4. DO NOT CHANGE IT. CHANGE THE .tt FILE INSTEAD.
// </auto-generated>
using System;
using System.Reflection;
using System.Reflection.Emit;

namespace PowerEmit
{
    partial struct Inst
    {

        /// <summary> Gets emitter to emit nop. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Nop()
            => new Inst(OpCodes.Nop);


        /// <summary> Gets emitter to emit break. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Break()
            => new Inst(OpCodes.Break);


        /// <summary> Gets emitter to emit ldarg.0. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Ldarg_0()
            => new Inst(OpCodes.Ldarg_0);


        /// <summary> Gets emitter to emit ldarg.1. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Ldarg_1()
            => new Inst(OpCodes.Ldarg_1);


        /// <summary> Gets emitter to emit ldarg.2. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Ldarg_2()
            => new Inst(OpCodes.Ldarg_2);


        /// <summary> Gets emitter to emit ldarg.3. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Ldarg_3()
            => new Inst(OpCodes.Ldarg_3);


        /// <summary> Gets emitter to emit ldloc.0. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Ldloc_0()
            => new Inst(OpCodes.Ldloc_0);


        /// <summary> Gets emitter to emit ldloc.1. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Ldloc_1()
            => new Inst(OpCodes.Ldloc_1);


        /// <summary> Gets emitter to emit ldloc.2. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Ldloc_2()
            => new Inst(OpCodes.Ldloc_2);


        /// <summary> Gets emitter to emit ldloc.3. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Ldloc_3()
            => new Inst(OpCodes.Ldloc_3);


        /// <summary> Gets emitter to emit stloc.0. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Stloc_0()
            => new Inst(OpCodes.Stloc_0);


        /// <summary> Gets emitter to emit stloc.1. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Stloc_1()
            => new Inst(OpCodes.Stloc_1);


        /// <summary> Gets emitter to emit stloc.2. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Stloc_2()
            => new Inst(OpCodes.Stloc_2);


        /// <summary> Gets emitter to emit stloc.3. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Stloc_3()
            => new Inst(OpCodes.Stloc_3);


        /// <summary> Gets emitter to emit ldarg.s. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<byte> Ldarg_S(byte operand)
            => new Inst<byte>(OpCodes.Ldarg_S, operand, null);


        /// <summary> Gets emitter to emit ldarga.s. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<byte> Ldarga_S(byte operand)
            => new Inst<byte>(OpCodes.Ldarga_S, operand, null);


        /// <summary> Gets emitter to emit starg.s. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<byte> Starg_S(byte operand)
            => new Inst<byte>(OpCodes.Starg_S, operand, null);


        /// <summary> Gets emitter to emit ldloc.s. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<byte> Ldloc_S(byte operand)
            => new Inst<byte>(OpCodes.Ldloc_S, operand, null);


        /// <summary> Gets emitter to emit ldloc.s. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<LocalBuilder> Ldloc_S(LocalBuilder operand)
            => new Inst<LocalBuilder>(OpCodes.Ldloc_S, operand, null);


        /// <summary> Gets emitter to emit ldloca.s. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<byte> Ldloca_S(byte operand)
            => new Inst<byte>(OpCodes.Ldloca_S, operand, null);


        /// <summary> Gets emitter to emit ldloca.s. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<LocalBuilder> Ldloca_S(LocalBuilder operand)
            => new Inst<LocalBuilder>(OpCodes.Ldloca_S, operand, null);


        /// <summary> Gets emitter to emit stloc.s. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<byte> Stloc_S(byte operand)
            => new Inst<byte>(OpCodes.Stloc_S, operand, null);


        /// <summary> Gets emitter to emit stloc.s. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<LocalBuilder> Stloc_S(LocalBuilder operand)
            => new Inst<LocalBuilder>(OpCodes.Stloc_S, operand, null);


        /// <summary> Gets emitter to emit ldnull. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Ldnull()
            => new Inst(OpCodes.Ldnull);


        /// <summary> Gets emitter to emit ldc.i4.m1. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Ldc_I4_M1()
            => new Inst(OpCodes.Ldc_I4_M1);


        /// <summary> Gets emitter to emit ldc.i4.0. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Ldc_I4_0()
            => new Inst(OpCodes.Ldc_I4_0);


        /// <summary> Gets emitter to emit ldc.i4.1. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Ldc_I4_1()
            => new Inst(OpCodes.Ldc_I4_1);


        /// <summary> Gets emitter to emit ldc.i4.2. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Ldc_I4_2()
            => new Inst(OpCodes.Ldc_I4_2);


        /// <summary> Gets emitter to emit ldc.i4.3. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Ldc_I4_3()
            => new Inst(OpCodes.Ldc_I4_3);


        /// <summary> Gets emitter to emit ldc.i4.4. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Ldc_I4_4()
            => new Inst(OpCodes.Ldc_I4_4);


        /// <summary> Gets emitter to emit ldc.i4.5. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Ldc_I4_5()
            => new Inst(OpCodes.Ldc_I4_5);


        /// <summary> Gets emitter to emit ldc.i4.6. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Ldc_I4_6()
            => new Inst(OpCodes.Ldc_I4_6);


        /// <summary> Gets emitter to emit ldc.i4.7. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Ldc_I4_7()
            => new Inst(OpCodes.Ldc_I4_7);


        /// <summary> Gets emitter to emit ldc.i4.8. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Ldc_I4_8()
            => new Inst(OpCodes.Ldc_I4_8);


        /// <summary> Gets emitter to emit ldc.i4.s. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<sbyte> Ldc_I4_S(sbyte operand)
            => new Inst<sbyte>(OpCodes.Ldc_I4_S, operand, null);


        /// <summary> Gets emitter to emit ldc.i4. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<int> Ldc_I4(int operand)
            => new Inst<int>(OpCodes.Ldc_I4, operand, null);


        /// <summary> Gets emitter to emit ldc.i8. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<long> Ldc_I8(long operand)
            => new Inst<long>(OpCodes.Ldc_I8, operand, null);


        /// <summary> Gets emitter to emit ldc.r4. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<float> Ldc_R4(float operand)
            => new Inst<float>(OpCodes.Ldc_R4, operand, null);


        /// <summary> Gets emitter to emit ldc.r8. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<double> Ldc_R8(double operand)
            => new Inst<double>(OpCodes.Ldc_R8, operand, null);


        /// <summary> Gets emitter to emit dup. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Dup()
            => new Inst(OpCodes.Dup);


        /// <summary> Gets emitter to emit pop. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Pop()
            => new Inst(OpCodes.Pop);


        /// <summary> Gets emitter to emit jmp. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<MethodInfo> Jmp(MethodInfo operand)
            => new Inst<MethodInfo>(OpCodes.Jmp, operand, null);


        /// <summary> Gets emitter to emit call. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<MethodInfo> Call(MethodInfo operand)
            => new Inst<MethodInfo>(OpCodes.Call, operand, null);


        /// <summary> Gets emitter to emit call. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<ConstructorInfo> Call(ConstructorInfo operand)
            => new Inst<ConstructorInfo>(OpCodes.Call, operand, null);


        /// <summary> Gets emitter to emit ret. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Ret()
            => new Inst(OpCodes.Ret);


        /// <summary> Gets emitter to emit br.s. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<Label> Br_S(Label operand)
            => new Inst<Label>(OpCodes.Br_S, operand, null);


        /// <summary> Gets emitter to emit br.s. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<LabelBuilder> Br_S(LabelBuilder operand)
            => new Inst<LabelBuilder>(OpCodes.Br_S, operand, null);


        /// <summary> Gets emitter to emit brfalse.s. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<Label> Brfalse_S(Label operand)
            => new Inst<Label>(OpCodes.Brfalse_S, operand, null);


        /// <summary> Gets emitter to emit brfalse.s. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<LabelBuilder> Brfalse_S(LabelBuilder operand)
            => new Inst<LabelBuilder>(OpCodes.Brfalse_S, operand, null);


        /// <summary> Gets emitter to emit brtrue.s. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<Label> Brtrue_S(Label operand)
            => new Inst<Label>(OpCodes.Brtrue_S, operand, null);


        /// <summary> Gets emitter to emit brtrue.s. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<LabelBuilder> Brtrue_S(LabelBuilder operand)
            => new Inst<LabelBuilder>(OpCodes.Brtrue_S, operand, null);


        /// <summary> Gets emitter to emit beq.s. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<Label> Beq_S(Label operand)
            => new Inst<Label>(OpCodes.Beq_S, operand, null);


        /// <summary> Gets emitter to emit beq.s. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<LabelBuilder> Beq_S(LabelBuilder operand)
            => new Inst<LabelBuilder>(OpCodes.Beq_S, operand, null);


        /// <summary> Gets emitter to emit bge.s. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<Label> Bge_S(Label operand)
            => new Inst<Label>(OpCodes.Bge_S, operand, null);


        /// <summary> Gets emitter to emit bge.s. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<LabelBuilder> Bge_S(LabelBuilder operand)
            => new Inst<LabelBuilder>(OpCodes.Bge_S, operand, null);


        /// <summary> Gets emitter to emit bgt.s. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<Label> Bgt_S(Label operand)
            => new Inst<Label>(OpCodes.Bgt_S, operand, null);


        /// <summary> Gets emitter to emit bgt.s. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<LabelBuilder> Bgt_S(LabelBuilder operand)
            => new Inst<LabelBuilder>(OpCodes.Bgt_S, operand, null);


        /// <summary> Gets emitter to emit ble.s. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<Label> Ble_S(Label operand)
            => new Inst<Label>(OpCodes.Ble_S, operand, null);


        /// <summary> Gets emitter to emit ble.s. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<LabelBuilder> Ble_S(LabelBuilder operand)
            => new Inst<LabelBuilder>(OpCodes.Ble_S, operand, null);


        /// <summary> Gets emitter to emit blt.s. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<Label> Blt_S(Label operand)
            => new Inst<Label>(OpCodes.Blt_S, operand, null);


        /// <summary> Gets emitter to emit blt.s. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<LabelBuilder> Blt_S(LabelBuilder operand)
            => new Inst<LabelBuilder>(OpCodes.Blt_S, operand, null);


        /// <summary> Gets emitter to emit bne.un.s. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<Label> Bne_Un_S(Label operand)
            => new Inst<Label>(OpCodes.Bne_Un_S, operand, null);


        /// <summary> Gets emitter to emit bne.un.s. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<LabelBuilder> Bne_Un_S(LabelBuilder operand)
            => new Inst<LabelBuilder>(OpCodes.Bne_Un_S, operand, null);


        /// <summary> Gets emitter to emit bge.un.s. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<Label> Bge_Un_S(Label operand)
            => new Inst<Label>(OpCodes.Bge_Un_S, operand, null);


        /// <summary> Gets emitter to emit bge.un.s. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<LabelBuilder> Bge_Un_S(LabelBuilder operand)
            => new Inst<LabelBuilder>(OpCodes.Bge_Un_S, operand, null);


        /// <summary> Gets emitter to emit bgt.un.s. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<Label> Bgt_Un_S(Label operand)
            => new Inst<Label>(OpCodes.Bgt_Un_S, operand, null);


        /// <summary> Gets emitter to emit bgt.un.s. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<LabelBuilder> Bgt_Un_S(LabelBuilder operand)
            => new Inst<LabelBuilder>(OpCodes.Bgt_Un_S, operand, null);


        /// <summary> Gets emitter to emit ble.un.s. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<Label> Ble_Un_S(Label operand)
            => new Inst<Label>(OpCodes.Ble_Un_S, operand, null);


        /// <summary> Gets emitter to emit ble.un.s. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<LabelBuilder> Ble_Un_S(LabelBuilder operand)
            => new Inst<LabelBuilder>(OpCodes.Ble_Un_S, operand, null);


        /// <summary> Gets emitter to emit blt.un.s. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<Label> Blt_Un_S(Label operand)
            => new Inst<Label>(OpCodes.Blt_Un_S, operand, null);


        /// <summary> Gets emitter to emit blt.un.s. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<LabelBuilder> Blt_Un_S(LabelBuilder operand)
            => new Inst<LabelBuilder>(OpCodes.Blt_Un_S, operand, null);


        /// <summary> Gets emitter to emit br. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<Label> Br(Label operand)
            => new Inst<Label>(OpCodes.Br, operand, null);


        /// <summary> Gets emitter to emit br. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<LabelBuilder> Br(LabelBuilder operand)
            => new Inst<LabelBuilder>(OpCodes.Br, operand, null);


        /// <summary> Gets emitter to emit brfalse. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<Label> Brfalse(Label operand)
            => new Inst<Label>(OpCodes.Brfalse, operand, null);


        /// <summary> Gets emitter to emit brfalse. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<LabelBuilder> Brfalse(LabelBuilder operand)
            => new Inst<LabelBuilder>(OpCodes.Brfalse, operand, null);


        /// <summary> Gets emitter to emit brtrue. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<Label> Brtrue(Label operand)
            => new Inst<Label>(OpCodes.Brtrue, operand, null);


        /// <summary> Gets emitter to emit brtrue. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<LabelBuilder> Brtrue(LabelBuilder operand)
            => new Inst<LabelBuilder>(OpCodes.Brtrue, operand, null);


        /// <summary> Gets emitter to emit beq. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<Label> Beq(Label operand)
            => new Inst<Label>(OpCodes.Beq, operand, null);


        /// <summary> Gets emitter to emit beq. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<LabelBuilder> Beq(LabelBuilder operand)
            => new Inst<LabelBuilder>(OpCodes.Beq, operand, null);


        /// <summary> Gets emitter to emit bge. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<Label> Bge(Label operand)
            => new Inst<Label>(OpCodes.Bge, operand, null);


        /// <summary> Gets emitter to emit bge. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<LabelBuilder> Bge(LabelBuilder operand)
            => new Inst<LabelBuilder>(OpCodes.Bge, operand, null);


        /// <summary> Gets emitter to emit bgt. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<Label> Bgt(Label operand)
            => new Inst<Label>(OpCodes.Bgt, operand, null);


        /// <summary> Gets emitter to emit bgt. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<LabelBuilder> Bgt(LabelBuilder operand)
            => new Inst<LabelBuilder>(OpCodes.Bgt, operand, null);


        /// <summary> Gets emitter to emit ble. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<Label> Ble(Label operand)
            => new Inst<Label>(OpCodes.Ble, operand, null);


        /// <summary> Gets emitter to emit ble. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<LabelBuilder> Ble(LabelBuilder operand)
            => new Inst<LabelBuilder>(OpCodes.Ble, operand, null);


        /// <summary> Gets emitter to emit blt. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<Label> Blt(Label operand)
            => new Inst<Label>(OpCodes.Blt, operand, null);


        /// <summary> Gets emitter to emit blt. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<LabelBuilder> Blt(LabelBuilder operand)
            => new Inst<LabelBuilder>(OpCodes.Blt, operand, null);


        /// <summary> Gets emitter to emit bne.un. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<Label> Bne_Un(Label operand)
            => new Inst<Label>(OpCodes.Bne_Un, operand, null);


        /// <summary> Gets emitter to emit bne.un. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<LabelBuilder> Bne_Un(LabelBuilder operand)
            => new Inst<LabelBuilder>(OpCodes.Bne_Un, operand, null);


        /// <summary> Gets emitter to emit bge.un. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<Label> Bge_Un(Label operand)
            => new Inst<Label>(OpCodes.Bge_Un, operand, null);


        /// <summary> Gets emitter to emit bge.un. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<LabelBuilder> Bge_Un(LabelBuilder operand)
            => new Inst<LabelBuilder>(OpCodes.Bge_Un, operand, null);


        /// <summary> Gets emitter to emit bgt.un. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<Label> Bgt_Un(Label operand)
            => new Inst<Label>(OpCodes.Bgt_Un, operand, null);


        /// <summary> Gets emitter to emit bgt.un. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<LabelBuilder> Bgt_Un(LabelBuilder operand)
            => new Inst<LabelBuilder>(OpCodes.Bgt_Un, operand, null);


        /// <summary> Gets emitter to emit ble.un. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<Label> Ble_Un(Label operand)
            => new Inst<Label>(OpCodes.Ble_Un, operand, null);


        /// <summary> Gets emitter to emit ble.un. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<LabelBuilder> Ble_Un(LabelBuilder operand)
            => new Inst<LabelBuilder>(OpCodes.Ble_Un, operand, null);


        /// <summary> Gets emitter to emit blt.un. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<Label> Blt_Un(Label operand)
            => new Inst<Label>(OpCodes.Blt_Un, operand, null);


        /// <summary> Gets emitter to emit blt.un. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<LabelBuilder> Blt_Un(LabelBuilder operand)
            => new Inst<LabelBuilder>(OpCodes.Blt_Un, operand, null);


        /// <summary> Gets emitter to emit switch. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<Label[]> Switch(Label[] operand)
            => new Inst<Label[]>(OpCodes.Switch, operand, null);


        /// <summary> Gets emitter to emit switch. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<LabelBuilder[]> Switch(LabelBuilder[] operand)
            => new Inst<LabelBuilder[]>(OpCodes.Switch, operand, null);


        /// <summary> Gets emitter to emit ldind.i1. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Ldind_I1()
            => new Inst(OpCodes.Ldind_I1);


        /// <summary> Gets emitter to emit ldind.u1. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Ldind_U1()
            => new Inst(OpCodes.Ldind_U1);


        /// <summary> Gets emitter to emit ldind.i2. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Ldind_I2()
            => new Inst(OpCodes.Ldind_I2);


        /// <summary> Gets emitter to emit ldind.u2. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Ldind_U2()
            => new Inst(OpCodes.Ldind_U2);


        /// <summary> Gets emitter to emit ldind.i4. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Ldind_I4()
            => new Inst(OpCodes.Ldind_I4);


        /// <summary> Gets emitter to emit ldind.u4. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Ldind_U4()
            => new Inst(OpCodes.Ldind_U4);


        /// <summary> Gets emitter to emit ldind.i8. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Ldind_I8()
            => new Inst(OpCodes.Ldind_I8);


        /// <summary> Gets emitter to emit ldind.i. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Ldind_I()
            => new Inst(OpCodes.Ldind_I);


        /// <summary> Gets emitter to emit ldind.r4. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Ldind_R4()
            => new Inst(OpCodes.Ldind_R4);


        /// <summary> Gets emitter to emit ldind.r8. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Ldind_R8()
            => new Inst(OpCodes.Ldind_R8);


        /// <summary> Gets emitter to emit ldind.ref. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Ldind_Ref()
            => new Inst(OpCodes.Ldind_Ref);


        /// <summary> Gets emitter to emit stind.ref. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Stind_Ref()
            => new Inst(OpCodes.Stind_Ref);


        /// <summary> Gets emitter to emit stind.i1. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Stind_I1()
            => new Inst(OpCodes.Stind_I1);


        /// <summary> Gets emitter to emit stind.i2. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Stind_I2()
            => new Inst(OpCodes.Stind_I2);


        /// <summary> Gets emitter to emit stind.i4. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Stind_I4()
            => new Inst(OpCodes.Stind_I4);


        /// <summary> Gets emitter to emit stind.i8. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Stind_I8()
            => new Inst(OpCodes.Stind_I8);


        /// <summary> Gets emitter to emit stind.r4. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Stind_R4()
            => new Inst(OpCodes.Stind_R4);


        /// <summary> Gets emitter to emit stind.r8. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Stind_R8()
            => new Inst(OpCodes.Stind_R8);


        /// <summary> Gets emitter to emit add. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Add()
            => new Inst(OpCodes.Add);


        /// <summary> Gets emitter to emit sub. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Sub()
            => new Inst(OpCodes.Sub);


        /// <summary> Gets emitter to emit mul. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Mul()
            => new Inst(OpCodes.Mul);


        /// <summary> Gets emitter to emit div. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Div()
            => new Inst(OpCodes.Div);


        /// <summary> Gets emitter to emit div.un. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Div_Un()
            => new Inst(OpCodes.Div_Un);


        /// <summary> Gets emitter to emit rem. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Rem()
            => new Inst(OpCodes.Rem);


        /// <summary> Gets emitter to emit rem.un. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Rem_Un()
            => new Inst(OpCodes.Rem_Un);


        /// <summary> Gets emitter to emit and. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst And()
            => new Inst(OpCodes.And);


        /// <summary> Gets emitter to emit or. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Or()
            => new Inst(OpCodes.Or);


        /// <summary> Gets emitter to emit xor. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Xor()
            => new Inst(OpCodes.Xor);


        /// <summary> Gets emitter to emit shl. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Shl()
            => new Inst(OpCodes.Shl);


        /// <summary> Gets emitter to emit shr. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Shr()
            => new Inst(OpCodes.Shr);


        /// <summary> Gets emitter to emit shr.un. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Shr_Un()
            => new Inst(OpCodes.Shr_Un);


        /// <summary> Gets emitter to emit neg. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Neg()
            => new Inst(OpCodes.Neg);


        /// <summary> Gets emitter to emit not. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Not()
            => new Inst(OpCodes.Not);


        /// <summary> Gets emitter to emit conv.i1. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Conv_I1()
            => new Inst(OpCodes.Conv_I1);


        /// <summary> Gets emitter to emit conv.i2. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Conv_I2()
            => new Inst(OpCodes.Conv_I2);


        /// <summary> Gets emitter to emit conv.i4. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Conv_I4()
            => new Inst(OpCodes.Conv_I4);


        /// <summary> Gets emitter to emit conv.i8. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Conv_I8()
            => new Inst(OpCodes.Conv_I8);


        /// <summary> Gets emitter to emit conv.r4. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Conv_R4()
            => new Inst(OpCodes.Conv_R4);


        /// <summary> Gets emitter to emit conv.r8. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Conv_R8()
            => new Inst(OpCodes.Conv_R8);


        /// <summary> Gets emitter to emit conv.u4. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Conv_U4()
            => new Inst(OpCodes.Conv_U4);


        /// <summary> Gets emitter to emit conv.u8. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Conv_U8()
            => new Inst(OpCodes.Conv_U8);


        /// <summary> Gets emitter to emit callvirt. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<MethodInfo> Callvirt(MethodInfo operand)
            => new Inst<MethodInfo>(OpCodes.Callvirt, operand, null);


        /// <summary> Gets emitter to emit cpobj. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<Type> Cpobj(Type operand)
            => new Inst<Type>(OpCodes.Cpobj, operand, null);


        /// <summary> Gets emitter to emit ldobj. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<Type> Ldobj(Type operand)
            => new Inst<Type>(OpCodes.Ldobj, operand, null);


        /// <summary> Gets emitter to emit ldstr. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<string> Ldstr(string operand)
            => new Inst<string>(OpCodes.Ldstr, operand, null);


        /// <summary> Gets emitter to emit newobj. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<ConstructorInfo> Newobj(ConstructorInfo operand)
            => new Inst<ConstructorInfo>(OpCodes.Newobj, operand, null);


        /// <summary> Gets emitter to emit castclass. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<Type> Castclass(Type operand)
            => new Inst<Type>(OpCodes.Castclass, operand, null);


        /// <summary> Gets emitter to emit isinst. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<Type> Isinst(Type operand)
            => new Inst<Type>(OpCodes.Isinst, operand, null);


        /// <summary> Gets emitter to emit conv.r.un. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Conv_R_Un()
            => new Inst(OpCodes.Conv_R_Un);


        /// <summary> Gets emitter to emit unbox. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<Type> Unbox(Type operand)
            => new Inst<Type>(OpCodes.Unbox, operand, null);


        /// <summary> Gets emitter to emit throw. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Throw()
            => new Inst(OpCodes.Throw);


        /// <summary> Gets emitter to emit ldfld. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<FieldInfo> Ldfld(FieldInfo operand)
            => new Inst<FieldInfo>(OpCodes.Ldfld, operand, null);


        /// <summary> Gets emitter to emit ldflda. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<FieldInfo> Ldflda(FieldInfo operand)
            => new Inst<FieldInfo>(OpCodes.Ldflda, operand, null);


        /// <summary> Gets emitter to emit stfld. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<FieldInfo> Stfld(FieldInfo operand)
            => new Inst<FieldInfo>(OpCodes.Stfld, operand, null);


        /// <summary> Gets emitter to emit ldsfld. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<FieldInfo> Ldsfld(FieldInfo operand)
            => new Inst<FieldInfo>(OpCodes.Ldsfld, operand, null);


        /// <summary> Gets emitter to emit ldsflda. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<FieldInfo> Ldsflda(FieldInfo operand)
            => new Inst<FieldInfo>(OpCodes.Ldsflda, operand, null);


        /// <summary> Gets emitter to emit stsfld. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<FieldInfo> Stsfld(FieldInfo operand)
            => new Inst<FieldInfo>(OpCodes.Stsfld, operand, null);


        /// <summary> Gets emitter to emit stobj. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<Type> Stobj(Type operand)
            => new Inst<Type>(OpCodes.Stobj, operand, null);


        /// <summary> Gets emitter to emit conv.ovf.i1.un. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Conv_Ovf_I1_Un()
            => new Inst(OpCodes.Conv_Ovf_I1_Un);


        /// <summary> Gets emitter to emit conv.ovf.i2.un. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Conv_Ovf_I2_Un()
            => new Inst(OpCodes.Conv_Ovf_I2_Un);


        /// <summary> Gets emitter to emit conv.ovf.i4.un. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Conv_Ovf_I4_Un()
            => new Inst(OpCodes.Conv_Ovf_I4_Un);


        /// <summary> Gets emitter to emit conv.ovf.i8.un. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Conv_Ovf_I8_Un()
            => new Inst(OpCodes.Conv_Ovf_I8_Un);


        /// <summary> Gets emitter to emit conv.ovf.u1.un. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Conv_Ovf_U1_Un()
            => new Inst(OpCodes.Conv_Ovf_U1_Un);


        /// <summary> Gets emitter to emit conv.ovf.u2.un. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Conv_Ovf_U2_Un()
            => new Inst(OpCodes.Conv_Ovf_U2_Un);


        /// <summary> Gets emitter to emit conv.ovf.u4.un. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Conv_Ovf_U4_Un()
            => new Inst(OpCodes.Conv_Ovf_U4_Un);


        /// <summary> Gets emitter to emit conv.ovf.u8.un. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Conv_Ovf_U8_Un()
            => new Inst(OpCodes.Conv_Ovf_U8_Un);


        /// <summary> Gets emitter to emit conv.ovf.i.un. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Conv_Ovf_I_Un()
            => new Inst(OpCodes.Conv_Ovf_I_Un);


        /// <summary> Gets emitter to emit conv.ovf.u.un. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Conv_Ovf_U_Un()
            => new Inst(OpCodes.Conv_Ovf_U_Un);


        /// <summary> Gets emitter to emit box. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<Type> Box(Type operand)
            => new Inst<Type>(OpCodes.Box, operand, null);


        /// <summary> Gets emitter to emit newarr. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<Type> Newarr(Type operand)
            => new Inst<Type>(OpCodes.Newarr, operand, null);


        /// <summary> Gets emitter to emit ldlen. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Ldlen()
            => new Inst(OpCodes.Ldlen);


        /// <summary> Gets emitter to emit ldelema. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<Type> Ldelema(Type operand)
            => new Inst<Type>(OpCodes.Ldelema, operand, null);


        /// <summary> Gets emitter to emit ldelem.i1. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Ldelem_I1()
            => new Inst(OpCodes.Ldelem_I1);


        /// <summary> Gets emitter to emit ldelem.u1. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Ldelem_U1()
            => new Inst(OpCodes.Ldelem_U1);


        /// <summary> Gets emitter to emit ldelem.i2. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Ldelem_I2()
            => new Inst(OpCodes.Ldelem_I2);


        /// <summary> Gets emitter to emit ldelem.u2. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Ldelem_U2()
            => new Inst(OpCodes.Ldelem_U2);


        /// <summary> Gets emitter to emit ldelem.i4. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Ldelem_I4()
            => new Inst(OpCodes.Ldelem_I4);


        /// <summary> Gets emitter to emit ldelem.u4. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Ldelem_U4()
            => new Inst(OpCodes.Ldelem_U4);


        /// <summary> Gets emitter to emit ldelem.i8. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Ldelem_I8()
            => new Inst(OpCodes.Ldelem_I8);


        /// <summary> Gets emitter to emit ldelem.i. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Ldelem_I()
            => new Inst(OpCodes.Ldelem_I);


        /// <summary> Gets emitter to emit ldelem.r4. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Ldelem_R4()
            => new Inst(OpCodes.Ldelem_R4);


        /// <summary> Gets emitter to emit ldelem.r8. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Ldelem_R8()
            => new Inst(OpCodes.Ldelem_R8);


        /// <summary> Gets emitter to emit ldelem.ref. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Ldelem_Ref()
            => new Inst(OpCodes.Ldelem_Ref);


        /// <summary> Gets emitter to emit stelem.i. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Stelem_I()
            => new Inst(OpCodes.Stelem_I);


        /// <summary> Gets emitter to emit stelem.i1. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Stelem_I1()
            => new Inst(OpCodes.Stelem_I1);


        /// <summary> Gets emitter to emit stelem.i2. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Stelem_I2()
            => new Inst(OpCodes.Stelem_I2);


        /// <summary> Gets emitter to emit stelem.i4. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Stelem_I4()
            => new Inst(OpCodes.Stelem_I4);


        /// <summary> Gets emitter to emit stelem.i8. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Stelem_I8()
            => new Inst(OpCodes.Stelem_I8);


        /// <summary> Gets emitter to emit stelem.r4. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Stelem_R4()
            => new Inst(OpCodes.Stelem_R4);


        /// <summary> Gets emitter to emit stelem.r8. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Stelem_R8()
            => new Inst(OpCodes.Stelem_R8);


        /// <summary> Gets emitter to emit stelem.ref. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Stelem_Ref()
            => new Inst(OpCodes.Stelem_Ref);


        /// <summary> Gets emitter to emit ldelem. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<Type> Ldelem(Type operand)
            => new Inst<Type>(OpCodes.Ldelem, operand, null);


        /// <summary> Gets emitter to emit stelem. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<Type> Stelem(Type operand)
            => new Inst<Type>(OpCodes.Stelem, operand, null);


        /// <summary> Gets emitter to emit unbox.any. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<Type> Unbox_Any(Type operand)
            => new Inst<Type>(OpCodes.Unbox_Any, operand, null);


        /// <summary> Gets emitter to emit conv.ovf.i1. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Conv_Ovf_I1()
            => new Inst(OpCodes.Conv_Ovf_I1);


        /// <summary> Gets emitter to emit conv.ovf.u1. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Conv_Ovf_U1()
            => new Inst(OpCodes.Conv_Ovf_U1);


        /// <summary> Gets emitter to emit conv.ovf.i2. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Conv_Ovf_I2()
            => new Inst(OpCodes.Conv_Ovf_I2);


        /// <summary> Gets emitter to emit conv.ovf.u2. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Conv_Ovf_U2()
            => new Inst(OpCodes.Conv_Ovf_U2);


        /// <summary> Gets emitter to emit conv.ovf.i4. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Conv_Ovf_I4()
            => new Inst(OpCodes.Conv_Ovf_I4);


        /// <summary> Gets emitter to emit conv.ovf.u4. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Conv_Ovf_U4()
            => new Inst(OpCodes.Conv_Ovf_U4);


        /// <summary> Gets emitter to emit conv.ovf.i8. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Conv_Ovf_I8()
            => new Inst(OpCodes.Conv_Ovf_I8);


        /// <summary> Gets emitter to emit conv.ovf.u8. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Conv_Ovf_U8()
            => new Inst(OpCodes.Conv_Ovf_U8);


        /// <summary> Gets emitter to emit refanyval. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<Type> Refanyval(Type operand)
            => new Inst<Type>(OpCodes.Refanyval, operand, null);


        /// <summary> Gets emitter to emit ckfinite. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Ckfinite()
            => new Inst(OpCodes.Ckfinite);


        /// <summary> Gets emitter to emit mkrefany. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<Type> Mkrefany(Type operand)
            => new Inst<Type>(OpCodes.Mkrefany, operand, null);


        /// <summary> Gets emitter to emit ldtoken. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<MethodInfo> Ldtoken(MethodInfo operand)
            => new Inst<MethodInfo>(OpCodes.Ldtoken, operand, null);


        /// <summary> Gets emitter to emit ldtoken. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<FieldInfo> Ldtoken(FieldInfo operand)
            => new Inst<FieldInfo>(OpCodes.Ldtoken, operand, null);


        /// <summary> Gets emitter to emit ldtoken. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<Type> Ldtoken(Type operand)
            => new Inst<Type>(OpCodes.Ldtoken, operand, null);


        /// <summary> Gets emitter to emit conv.u2. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Conv_U2()
            => new Inst(OpCodes.Conv_U2);


        /// <summary> Gets emitter to emit conv.u1. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Conv_U1()
            => new Inst(OpCodes.Conv_U1);


        /// <summary> Gets emitter to emit conv.i. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Conv_I()
            => new Inst(OpCodes.Conv_I);


        /// <summary> Gets emitter to emit conv.ovf.i. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Conv_Ovf_I()
            => new Inst(OpCodes.Conv_Ovf_I);


        /// <summary> Gets emitter to emit conv.ovf.u. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Conv_Ovf_U()
            => new Inst(OpCodes.Conv_Ovf_U);


        /// <summary> Gets emitter to emit add.ovf. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Add_Ovf()
            => new Inst(OpCodes.Add_Ovf);


        /// <summary> Gets emitter to emit add.ovf.un. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Add_Ovf_Un()
            => new Inst(OpCodes.Add_Ovf_Un);


        /// <summary> Gets emitter to emit mul.ovf. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Mul_Ovf()
            => new Inst(OpCodes.Mul_Ovf);


        /// <summary> Gets emitter to emit mul.ovf.un. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Mul_Ovf_Un()
            => new Inst(OpCodes.Mul_Ovf_Un);


        /// <summary> Gets emitter to emit sub.ovf. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Sub_Ovf()
            => new Inst(OpCodes.Sub_Ovf);


        /// <summary> Gets emitter to emit sub.ovf.un. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Sub_Ovf_Un()
            => new Inst(OpCodes.Sub_Ovf_Un);


        /// <summary> Gets emitter to emit endfinally. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Endfinally()
            => new Inst(OpCodes.Endfinally);


        /// <summary> Gets emitter to emit leave. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<Label> Leave(Label operand)
            => new Inst<Label>(OpCodes.Leave, operand, null);


        /// <summary> Gets emitter to emit leave. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<LabelBuilder> Leave(LabelBuilder operand)
            => new Inst<LabelBuilder>(OpCodes.Leave, operand, null);


        /// <summary> Gets emitter to emit leave.s. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<Label> Leave_S(Label operand)
            => new Inst<Label>(OpCodes.Leave_S, operand, null);


        /// <summary> Gets emitter to emit leave.s. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<LabelBuilder> Leave_S(LabelBuilder operand)
            => new Inst<LabelBuilder>(OpCodes.Leave_S, operand, null);


        /// <summary> Gets emitter to emit stind.i. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Stind_I()
            => new Inst(OpCodes.Stind_I);


        /// <summary> Gets emitter to emit conv.u. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Conv_U()
            => new Inst(OpCodes.Conv_U);


        /// <summary> Gets emitter to emit arglist. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Arglist()
            => new Inst(OpCodes.Arglist);


        /// <summary> Gets emitter to emit ceq. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Ceq()
            => new Inst(OpCodes.Ceq);


        /// <summary> Gets emitter to emit cgt. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Cgt()
            => new Inst(OpCodes.Cgt);


        /// <summary> Gets emitter to emit cgt.un. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Cgt_Un()
            => new Inst(OpCodes.Cgt_Un);


        /// <summary> Gets emitter to emit clt. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Clt()
            => new Inst(OpCodes.Clt);


        /// <summary> Gets emitter to emit clt.un. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Clt_Un()
            => new Inst(OpCodes.Clt_Un);


        /// <summary> Gets emitter to emit ldftn. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<MethodInfo> Ldftn(MethodInfo operand)
            => new Inst<MethodInfo>(OpCodes.Ldftn, operand, null);


        /// <summary> Gets emitter to emit ldvirtftn. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<MethodInfo> Ldvirtftn(MethodInfo operand)
            => new Inst<MethodInfo>(OpCodes.Ldvirtftn, operand, null);


        /// <summary> Gets emitter to emit ldarg. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<ushort> Ldarg(ushort operand)
            => new Inst<ushort>(OpCodes.Ldarg, operand, null);


        /// <summary> Gets emitter to emit ldarga. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<ushort> Ldarga(ushort operand)
            => new Inst<ushort>(OpCodes.Ldarga, operand, null);


        /// <summary> Gets emitter to emit starg. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<ushort> Starg(ushort operand)
            => new Inst<ushort>(OpCodes.Starg, operand, null);


        /// <summary> Gets emitter to emit ldloc. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<ushort> Ldloc(ushort operand)
            => new Inst<ushort>(OpCodes.Ldloc, operand, null);


        /// <summary> Gets emitter to emit ldloc. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<LocalBuilder> Ldloc(LocalBuilder operand)
            => new Inst<LocalBuilder>(OpCodes.Ldloc, operand, null);


        /// <summary> Gets emitter to emit ldloca. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<ushort> Ldloca(ushort operand)
            => new Inst<ushort>(OpCodes.Ldloca, operand, null);


        /// <summary> Gets emitter to emit ldloca. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<LocalBuilder> Ldloca(LocalBuilder operand)
            => new Inst<LocalBuilder>(OpCodes.Ldloca, operand, null);


        /// <summary> Gets emitter to emit stloc. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<ushort> Stloc(ushort operand)
            => new Inst<ushort>(OpCodes.Stloc, operand, null);


        /// <summary> Gets emitter to emit stloc. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<LocalBuilder> Stloc(LocalBuilder operand)
            => new Inst<LocalBuilder>(OpCodes.Stloc, operand, null);


        /// <summary> Gets emitter to emit localloc. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Localloc()
            => new Inst(OpCodes.Localloc);


        /// <summary> Gets emitter to emit endfilter. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Endfilter()
            => new Inst(OpCodes.Endfilter);


        /// <summary> Gets emitter to emit unaligned. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<Label> Unaligned(Label operand)
            => new Inst<Label>(OpCodes.Unaligned, operand, null);


        /// <summary> Gets emitter to emit unaligned. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<byte> Unaligned(byte operand)
            => new Inst<byte>(OpCodes.Unaligned, operand, null);


        /// <summary> Gets emitter to emit volatile. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Volatile()
            => new Inst(OpCodes.Volatile);


        /// <summary> Gets emitter to emit tailcall. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Tailcall()
            => new Inst(OpCodes.Tailcall);


        /// <summary> Gets emitter to emit initobj. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<Type> Initobj(Type operand)
            => new Inst<Type>(OpCodes.Initobj, operand, null);


        /// <summary> Gets emitter to emit constrained. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<Type> Constrained(Type operand)
            => new Inst<Type>(OpCodes.Constrained, operand, null);


        /// <summary> Gets emitter to emit cpblk. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Cpblk()
            => new Inst(OpCodes.Cpblk);


        /// <summary> Gets emitter to emit initblk. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Initblk()
            => new Inst(OpCodes.Initblk);


        /// <summary> Gets emitter to emit rethrow. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Rethrow()
            => new Inst(OpCodes.Rethrow);


        /// <summary> Gets emitter to emit sizeof. </summary>
        /// <param name="operand"> The operand to emit. </param>
        /// <returns> The built emitter. </returns>
        public static Inst<Type> Sizeof(Type operand)
            => new Inst<Type>(OpCodes.Sizeof, operand, null);


        /// <summary> Gets emitter to emit refanytype. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Refanytype()
            => new Inst(OpCodes.Refanytype);


        /// <summary> Gets emitter to emit readonly. </summary>
        /// <returns> The built emitter. </returns>
        public static Inst Readonly()
            => new Inst(OpCodes.Readonly);


    }
}
