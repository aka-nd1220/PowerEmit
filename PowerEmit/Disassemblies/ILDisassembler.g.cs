// <auto-generated>
// THIS (.g.cs) FILE IS GENERATED BY T4. DO NOT CHANGE IT. CHANGE THE .tt FILE INSTEAD.
// </auto-generated>
#pragma warning disable CS0162
using System;
using System.Collections.Generic;
using System.Reflection;
using System.Reflection.Emit;
using System.Text;

namespace PowerEmit.Disassemblies
{
    partial class ILDisassembler
    {
        protected virtual void DisassembleNextOpCode(int currentIndex, short opcode)
        {
            switch(opcode)
            {
            case OpCodeConst.Nop:
                {
                    PushOperation(OpCodeX.Nop());
                }
                return;
            case OpCodeConst.Break:
                {
                    PushOperation(OpCodeX.Break());
                }
                return;
            case OpCodeConst.Ldarg_0:
                {
                    PushOperation(OpCodeX.Ldarg_0());
                }
                return;
            case OpCodeConst.Ldarg_1:
                {
                    PushOperation(OpCodeX.Ldarg_1());
                }
                return;
            case OpCodeConst.Ldarg_2:
                {
                    PushOperation(OpCodeX.Ldarg_2());
                }
                return;
            case OpCodeConst.Ldarg_3:
                {
                    PushOperation(OpCodeX.Ldarg_3());
                }
                return;
            case OpCodeConst.Ldloc_0:
                {
                    PushOperation(OpCodeX.Ldloc_0());
                }
                return;
            case OpCodeConst.Ldloc_1:
                {
                    PushOperation(OpCodeX.Ldloc_1());
                }
                return;
            case OpCodeConst.Ldloc_2:
                {
                    PushOperation(OpCodeX.Ldloc_2());
                }
                return;
            case OpCodeConst.Ldloc_3:
                {
                    PushOperation(OpCodeX.Ldloc_3());
                }
                return;
            case OpCodeConst.Stloc_0:
                {
                    PushOperation(OpCodeX.Stloc_0());
                }
                return;
            case OpCodeConst.Stloc_1:
                {
                    PushOperation(OpCodeX.Stloc_1());
                }
                return;
            case OpCodeConst.Stloc_2:
                {
                    PushOperation(OpCodeX.Stloc_2());
                }
                return;
            case OpCodeConst.Stloc_3:
                {
                    PushOperation(OpCodeX.Stloc_3());
                }
                return;
            case OpCodeConst.Ldarg_S:
                {
                    var value = ReadStreamHead<byte>();
                    PushOperation(OpCodeX.Ldarg_S(value));
                }
                return;
            case OpCodeConst.Ldarga_S:
                {
                    var value = ReadStreamHead<byte>();
                    PushOperation(OpCodeX.Ldarga_S(value));
                }
                return;
            case OpCodeConst.Starg_S:
                {
                    var value = ReadStreamHead<byte>();
                    PushOperation(OpCodeX.Starg_S(value));
                }
                return;
            case OpCodeConst.Ldloc_S:
                {
                    var value = ReadStreamHead<byte>();
                    PushOperation(OpCodeX.Ldloc_S(value));
                }
                return;
            case OpCodeConst.Ldloca_S:
                {
                    var value = ReadStreamHead<byte>();
                    PushOperation(OpCodeX.Ldloca_S(value));
                }
                return;
            case OpCodeConst.Stloc_S:
                {
                    var value = ReadStreamHead<byte>();
                    PushOperation(OpCodeX.Stloc_S(value));
                }
                return;
            case OpCodeConst.Ldnull:
                {
                    PushOperation(OpCodeX.Ldnull());
                }
                return;
            case OpCodeConst.Ldc_I4_M1:
                {
                    PushOperation(OpCodeX.Ldc_I4_M1());
                }
                return;
            case OpCodeConst.Ldc_I4_0:
                {
                    PushOperation(OpCodeX.Ldc_I4_0());
                }
                return;
            case OpCodeConst.Ldc_I4_1:
                {
                    PushOperation(OpCodeX.Ldc_I4_1());
                }
                return;
            case OpCodeConst.Ldc_I4_2:
                {
                    PushOperation(OpCodeX.Ldc_I4_2());
                }
                return;
            case OpCodeConst.Ldc_I4_3:
                {
                    PushOperation(OpCodeX.Ldc_I4_3());
                }
                return;
            case OpCodeConst.Ldc_I4_4:
                {
                    PushOperation(OpCodeX.Ldc_I4_4());
                }
                return;
            case OpCodeConst.Ldc_I4_5:
                {
                    PushOperation(OpCodeX.Ldc_I4_5());
                }
                return;
            case OpCodeConst.Ldc_I4_6:
                {
                    PushOperation(OpCodeX.Ldc_I4_6());
                }
                return;
            case OpCodeConst.Ldc_I4_7:
                {
                    PushOperation(OpCodeX.Ldc_I4_7());
                }
                return;
            case OpCodeConst.Ldc_I4_8:
                {
                    PushOperation(OpCodeX.Ldc_I4_8());
                }
                return;
            case OpCodeConst.Ldc_I4_S:
                {
                    var value = ReadStreamHead<sbyte>();
                    PushOperation(OpCodeX.Ldc_I4_S(value));
                }
                return;
            case OpCodeConst.Ldc_I4:
                {
                    var value = ReadStreamHead<int>();
                    PushOperation(OpCodeX.Ldc_I4(value));
                }
                return;
            case OpCodeConst.Ldc_I8:
                {
                    var value = ReadStreamHead<long>();
                    PushOperation(OpCodeX.Ldc_I8(value));
                }
                return;
            case OpCodeConst.Ldc_R4:
                {
                    var value = ReadStreamHead<float>();
                    PushOperation(OpCodeX.Ldc_R4(value));
                }
                return;
            case OpCodeConst.Ldc_R8:
                {
                    var value = ReadStreamHead<double>();
                    PushOperation(OpCodeX.Ldc_R8(value));
                }
                return;
            case OpCodeConst.Dup:
                {
                    PushOperation(OpCodeX.Dup());
                }
                return;
            case OpCodeConst.Pop:
                {
                    PushOperation(OpCodeX.Pop());
                }
                return;
            case OpCodeConst.Jmp:
                {
                    var meth = (MethodInfo)Method.DeclaringType.Module.ResolveMethod(ReadStreamHead<int>());
                    PushOperation(OpCodeX.Jmp(meth));
                }
                return;
            case OpCodeConst.Call:
                {
                    var meth = (MethodInfo)Method.DeclaringType.Module.ResolveMethod(ReadStreamHead<int>());
                    PushOperation(OpCodeX.Call(meth));
                }
                return;
            case OpCodeConst.Calli:
                {
                    // var sig = Method.DeclaringType.Module.ResolveSignature(ReadStreamHead<int>());
                    // PushOperation(OpCodeX.Calli(sig));
                    throw new NotSupportedException();
                }
                return;
            case OpCodeConst.Ret:
                {
                    PushOperation(OpCodeX.Ret());
                }
                return;
            case OpCodeConst.Br_S:
                {
                    var offset = ReadStreamHead<sbyte>();
                    PushOperation(OpCodeX.Br_S(GetOrAddLabel(currentIndex + OpCodes.Br_S.GetTotalByteSize() + offset)));
                }
                return;
            case OpCodeConst.Brfalse_S:
                {
                    var offset = ReadStreamHead<sbyte>();
                    PushOperation(OpCodeX.Brfalse_S(GetOrAddLabel(currentIndex + OpCodes.Brfalse_S.GetTotalByteSize() + offset)));
                }
                return;
            case OpCodeConst.Brtrue_S:
                {
                    var offset = ReadStreamHead<sbyte>();
                    PushOperation(OpCodeX.Brtrue_S(GetOrAddLabel(currentIndex + OpCodes.Brtrue_S.GetTotalByteSize() + offset)));
                }
                return;
            case OpCodeConst.Beq_S:
                {
                    var offset = ReadStreamHead<sbyte>();
                    PushOperation(OpCodeX.Beq_S(GetOrAddLabel(currentIndex + OpCodes.Beq_S.GetTotalByteSize() + offset)));
                }
                return;
            case OpCodeConst.Bge_S:
                {
                    var offset = ReadStreamHead<sbyte>();
                    PushOperation(OpCodeX.Bge_S(GetOrAddLabel(currentIndex + OpCodes.Bge_S.GetTotalByteSize() + offset)));
                }
                return;
            case OpCodeConst.Bgt_S:
                {
                    var offset = ReadStreamHead<sbyte>();
                    PushOperation(OpCodeX.Bgt_S(GetOrAddLabel(currentIndex + OpCodes.Bgt_S.GetTotalByteSize() + offset)));
                }
                return;
            case OpCodeConst.Ble_S:
                {
                    var offset = ReadStreamHead<sbyte>();
                    PushOperation(OpCodeX.Ble_S(GetOrAddLabel(currentIndex + OpCodes.Ble_S.GetTotalByteSize() + offset)));
                }
                return;
            case OpCodeConst.Blt_S:
                {
                    var offset = ReadStreamHead<sbyte>();
                    PushOperation(OpCodeX.Blt_S(GetOrAddLabel(currentIndex + OpCodes.Blt_S.GetTotalByteSize() + offset)));
                }
                return;
            case OpCodeConst.Bne_Un_S:
                {
                    var offset = ReadStreamHead<sbyte>();
                    PushOperation(OpCodeX.Bne_Un_S(GetOrAddLabel(currentIndex + OpCodes.Bne_Un_S.GetTotalByteSize() + offset)));
                }
                return;
            case OpCodeConst.Bge_Un_S:
                {
                    var offset = ReadStreamHead<sbyte>();
                    PushOperation(OpCodeX.Bge_Un_S(GetOrAddLabel(currentIndex + OpCodes.Bge_Un_S.GetTotalByteSize() + offset)));
                }
                return;
            case OpCodeConst.Bgt_Un_S:
                {
                    var offset = ReadStreamHead<sbyte>();
                    PushOperation(OpCodeX.Bgt_Un_S(GetOrAddLabel(currentIndex + OpCodes.Bgt_Un_S.GetTotalByteSize() + offset)));
                }
                return;
            case OpCodeConst.Ble_Un_S:
                {
                    var offset = ReadStreamHead<sbyte>();
                    PushOperation(OpCodeX.Ble_Un_S(GetOrAddLabel(currentIndex + OpCodes.Ble_Un_S.GetTotalByteSize() + offset)));
                }
                return;
            case OpCodeConst.Blt_Un_S:
                {
                    var offset = ReadStreamHead<sbyte>();
                    PushOperation(OpCodeX.Blt_Un_S(GetOrAddLabel(currentIndex + OpCodes.Blt_Un_S.GetTotalByteSize() + offset)));
                }
                return;
            case OpCodeConst.Br:
                {
                    var offset = ReadStreamHead<int>();
                    PushOperation(OpCodeX.Br(GetOrAddLabel(currentIndex + OpCodes.Br.GetTotalByteSize() + offset)));
                }
                return;
            case OpCodeConst.Brfalse:
                {
                    var offset = ReadStreamHead<int>();
                    PushOperation(OpCodeX.Brfalse(GetOrAddLabel(currentIndex + OpCodes.Brfalse.GetTotalByteSize() + offset)));
                }
                return;
            case OpCodeConst.Brtrue:
                {
                    var offset = ReadStreamHead<int>();
                    PushOperation(OpCodeX.Brtrue(GetOrAddLabel(currentIndex + OpCodes.Brtrue.GetTotalByteSize() + offset)));
                }
                return;
            case OpCodeConst.Beq:
                {
                    var offset = ReadStreamHead<int>();
                    PushOperation(OpCodeX.Beq(GetOrAddLabel(currentIndex + OpCodes.Beq.GetTotalByteSize() + offset)));
                }
                return;
            case OpCodeConst.Bge:
                {
                    var offset = ReadStreamHead<int>();
                    PushOperation(OpCodeX.Bge(GetOrAddLabel(currentIndex + OpCodes.Bge.GetTotalByteSize() + offset)));
                }
                return;
            case OpCodeConst.Bgt:
                {
                    var offset = ReadStreamHead<int>();
                    PushOperation(OpCodeX.Bgt(GetOrAddLabel(currentIndex + OpCodes.Bgt.GetTotalByteSize() + offset)));
                }
                return;
            case OpCodeConst.Ble:
                {
                    var offset = ReadStreamHead<int>();
                    PushOperation(OpCodeX.Ble(GetOrAddLabel(currentIndex + OpCodes.Ble.GetTotalByteSize() + offset)));
                }
                return;
            case OpCodeConst.Blt:
                {
                    var offset = ReadStreamHead<int>();
                    PushOperation(OpCodeX.Blt(GetOrAddLabel(currentIndex + OpCodes.Blt.GetTotalByteSize() + offset)));
                }
                return;
            case OpCodeConst.Bne_Un:
                {
                    var offset = ReadStreamHead<int>();
                    PushOperation(OpCodeX.Bne_Un(GetOrAddLabel(currentIndex + OpCodes.Bne_Un.GetTotalByteSize() + offset)));
                }
                return;
            case OpCodeConst.Bge_Un:
                {
                    var offset = ReadStreamHead<int>();
                    PushOperation(OpCodeX.Bge_Un(GetOrAddLabel(currentIndex + OpCodes.Bge_Un.GetTotalByteSize() + offset)));
                }
                return;
            case OpCodeConst.Bgt_Un:
                {
                    var offset = ReadStreamHead<int>();
                    PushOperation(OpCodeX.Bgt_Un(GetOrAddLabel(currentIndex + OpCodes.Bgt_Un.GetTotalByteSize() + offset)));
                }
                return;
            case OpCodeConst.Ble_Un:
                {
                    var offset = ReadStreamHead<int>();
                    PushOperation(OpCodeX.Ble_Un(GetOrAddLabel(currentIndex + OpCodes.Ble_Un.GetTotalByteSize() + offset)));
                }
                return;
            case OpCodeConst.Blt_Un:
                {
                    var offset = ReadStreamHead<int>();
                    PushOperation(OpCodeX.Blt_Un(GetOrAddLabel(currentIndex + OpCodes.Blt_Un.GetTotalByteSize() + offset)));
                }
                return;
            case OpCodeConst.Switch:
                {
                    var labels = new LabelDescriptor[ReadStreamHead<int>()];
                    for(var i = 0; i < labels.Length; ++i)
                    {
                        labels[i] = GetOrAddLabel(currentIndex + 4 * (1 + labels.Length) + ReadStreamHead<int>());
                    }
                    PushOperation(OpCodeX.Switch(labels));
                }
                return;
            case OpCodeConst.Ldind_I1:
                {
                    PushOperation(OpCodeX.Ldind_I1());
                }
                return;
            case OpCodeConst.Ldind_U1:
                {
                    PushOperation(OpCodeX.Ldind_U1());
                }
                return;
            case OpCodeConst.Ldind_I2:
                {
                    PushOperation(OpCodeX.Ldind_I2());
                }
                return;
            case OpCodeConst.Ldind_U2:
                {
                    PushOperation(OpCodeX.Ldind_U2());
                }
                return;
            case OpCodeConst.Ldind_I4:
                {
                    PushOperation(OpCodeX.Ldind_I4());
                }
                return;
            case OpCodeConst.Ldind_U4:
                {
                    PushOperation(OpCodeX.Ldind_U4());
                }
                return;
            case OpCodeConst.Ldind_I8:
                {
                    PushOperation(OpCodeX.Ldind_I8());
                }
                return;
            case OpCodeConst.Ldind_I:
                {
                    PushOperation(OpCodeX.Ldind_I());
                }
                return;
            case OpCodeConst.Ldind_R4:
                {
                    PushOperation(OpCodeX.Ldind_R4());
                }
                return;
            case OpCodeConst.Ldind_R8:
                {
                    PushOperation(OpCodeX.Ldind_R8());
                }
                return;
            case OpCodeConst.Ldind_Ref:
                {
                    PushOperation(OpCodeX.Ldind_Ref());
                }
                return;
            case OpCodeConst.Stind_Ref:
                {
                    PushOperation(OpCodeX.Stind_Ref());
                }
                return;
            case OpCodeConst.Stind_I1:
                {
                    PushOperation(OpCodeX.Stind_I1());
                }
                return;
            case OpCodeConst.Stind_I2:
                {
                    PushOperation(OpCodeX.Stind_I2());
                }
                return;
            case OpCodeConst.Stind_I4:
                {
                    PushOperation(OpCodeX.Stind_I4());
                }
                return;
            case OpCodeConst.Stind_I8:
                {
                    PushOperation(OpCodeX.Stind_I8());
                }
                return;
            case OpCodeConst.Stind_R4:
                {
                    PushOperation(OpCodeX.Stind_R4());
                }
                return;
            case OpCodeConst.Stind_R8:
                {
                    PushOperation(OpCodeX.Stind_R8());
                }
                return;
            case OpCodeConst.Add:
                {
                    PushOperation(OpCodeX.Add());
                }
                return;
            case OpCodeConst.Sub:
                {
                    PushOperation(OpCodeX.Sub());
                }
                return;
            case OpCodeConst.Mul:
                {
                    PushOperation(OpCodeX.Mul());
                }
                return;
            case OpCodeConst.Div:
                {
                    PushOperation(OpCodeX.Div());
                }
                return;
            case OpCodeConst.Div_Un:
                {
                    PushOperation(OpCodeX.Div_Un());
                }
                return;
            case OpCodeConst.Rem:
                {
                    PushOperation(OpCodeX.Rem());
                }
                return;
            case OpCodeConst.Rem_Un:
                {
                    PushOperation(OpCodeX.Rem_Un());
                }
                return;
            case OpCodeConst.And:
                {
                    PushOperation(OpCodeX.And());
                }
                return;
            case OpCodeConst.Or:
                {
                    PushOperation(OpCodeX.Or());
                }
                return;
            case OpCodeConst.Xor:
                {
                    PushOperation(OpCodeX.Xor());
                }
                return;
            case OpCodeConst.Shl:
                {
                    PushOperation(OpCodeX.Shl());
                }
                return;
            case OpCodeConst.Shr:
                {
                    PushOperation(OpCodeX.Shr());
                }
                return;
            case OpCodeConst.Shr_Un:
                {
                    PushOperation(OpCodeX.Shr_Un());
                }
                return;
            case OpCodeConst.Neg:
                {
                    PushOperation(OpCodeX.Neg());
                }
                return;
            case OpCodeConst.Not:
                {
                    PushOperation(OpCodeX.Not());
                }
                return;
            case OpCodeConst.Conv_I1:
                {
                    PushOperation(OpCodeX.Conv_I1());
                }
                return;
            case OpCodeConst.Conv_I2:
                {
                    PushOperation(OpCodeX.Conv_I2());
                }
                return;
            case OpCodeConst.Conv_I4:
                {
                    PushOperation(OpCodeX.Conv_I4());
                }
                return;
            case OpCodeConst.Conv_I8:
                {
                    PushOperation(OpCodeX.Conv_I8());
                }
                return;
            case OpCodeConst.Conv_R4:
                {
                    PushOperation(OpCodeX.Conv_R4());
                }
                return;
            case OpCodeConst.Conv_R8:
                {
                    PushOperation(OpCodeX.Conv_R8());
                }
                return;
            case OpCodeConst.Conv_U4:
                {
                    PushOperation(OpCodeX.Conv_U4());
                }
                return;
            case OpCodeConst.Conv_U8:
                {
                    PushOperation(OpCodeX.Conv_U8());
                }
                return;
            case OpCodeConst.Callvirt:
                {
                    var meth = (MethodInfo)Method.DeclaringType.Module.ResolveMethod(ReadStreamHead<int>());
                    PushOperation(OpCodeX.Callvirt(meth));
                }
                return;
            case OpCodeConst.Cpobj:
                {
                    var type = Method.DeclaringType.Module.ResolveType(ReadStreamHead<int>());
                    PushOperation(OpCodeX.Cpobj(type));
                }
                return;
            case OpCodeConst.Ldobj:
                {
                    var type = Method.DeclaringType.Module.ResolveType(ReadStreamHead<int>());
                    PushOperation(OpCodeX.Ldobj(type));
                }
                return;
            case OpCodeConst.Ldstr:
                {
                    var str = Method.DeclaringType.Module.ResolveString(ReadStreamHead<int>());
                    PushOperation(OpCodeX.Ldstr(str));
                }
                return;
            case OpCodeConst.Newobj:
                {
                    var meth = (ConstructorInfo)Method.DeclaringType.Module.ResolveMethod(ReadStreamHead<int>());
                    PushOperation(OpCodeX.Newobj(meth));
                }
                return;
            case OpCodeConst.Castclass:
                {
                    var type = Method.DeclaringType.Module.ResolveType(ReadStreamHead<int>());
                    PushOperation(OpCodeX.Castclass(type));
                }
                return;
            case OpCodeConst.Isinst:
                {
                    var type = Method.DeclaringType.Module.ResolveType(ReadStreamHead<int>());
                    PushOperation(OpCodeX.Isinst(type));
                }
                return;
            case OpCodeConst.Conv_R_Un:
                {
                    PushOperation(OpCodeX.Conv_R_Un());
                }
                return;
            case OpCodeConst.Unbox:
                {
                    var type = Method.DeclaringType.Module.ResolveType(ReadStreamHead<int>());
                    PushOperation(OpCodeX.Unbox(type));
                }
                return;
            case OpCodeConst.Throw:
                {
                    PushOperation(OpCodeX.Throw());
                }
                return;
            case OpCodeConst.Ldfld:
                {
                    var fld = Method.DeclaringType.Module.ResolveField(ReadStreamHead<int>());
                    PushOperation(OpCodeX.Ldfld(fld));
                }
                return;
            case OpCodeConst.Ldflda:
                {
                    var fld = Method.DeclaringType.Module.ResolveField(ReadStreamHead<int>());
                    PushOperation(OpCodeX.Ldflda(fld));
                }
                return;
            case OpCodeConst.Stfld:
                {
                    var fld = Method.DeclaringType.Module.ResolveField(ReadStreamHead<int>());
                    PushOperation(OpCodeX.Stfld(fld));
                }
                return;
            case OpCodeConst.Ldsfld:
                {
                    var fld = Method.DeclaringType.Module.ResolveField(ReadStreamHead<int>());
                    PushOperation(OpCodeX.Ldsfld(fld));
                }
                return;
            case OpCodeConst.Ldsflda:
                {
                    var fld = Method.DeclaringType.Module.ResolveField(ReadStreamHead<int>());
                    PushOperation(OpCodeX.Ldsflda(fld));
                }
                return;
            case OpCodeConst.Stsfld:
                {
                    var fld = Method.DeclaringType.Module.ResolveField(ReadStreamHead<int>());
                    PushOperation(OpCodeX.Stsfld(fld));
                }
                return;
            case OpCodeConst.Stobj:
                {
                    var type = Method.DeclaringType.Module.ResolveType(ReadStreamHead<int>());
                    PushOperation(OpCodeX.Stobj(type));
                }
                return;
            case OpCodeConst.Conv_Ovf_I1_Un:
                {
                    PushOperation(OpCodeX.Conv_Ovf_I1_Un());
                }
                return;
            case OpCodeConst.Conv_Ovf_I2_Un:
                {
                    PushOperation(OpCodeX.Conv_Ovf_I2_Un());
                }
                return;
            case OpCodeConst.Conv_Ovf_I4_Un:
                {
                    PushOperation(OpCodeX.Conv_Ovf_I4_Un());
                }
                return;
            case OpCodeConst.Conv_Ovf_I8_Un:
                {
                    PushOperation(OpCodeX.Conv_Ovf_I8_Un());
                }
                return;
            case OpCodeConst.Conv_Ovf_U1_Un:
                {
                    PushOperation(OpCodeX.Conv_Ovf_U1_Un());
                }
                return;
            case OpCodeConst.Conv_Ovf_U2_Un:
                {
                    PushOperation(OpCodeX.Conv_Ovf_U2_Un());
                }
                return;
            case OpCodeConst.Conv_Ovf_U4_Un:
                {
                    PushOperation(OpCodeX.Conv_Ovf_U4_Un());
                }
                return;
            case OpCodeConst.Conv_Ovf_U8_Un:
                {
                    PushOperation(OpCodeX.Conv_Ovf_U8_Un());
                }
                return;
            case OpCodeConst.Conv_Ovf_I_Un:
                {
                    PushOperation(OpCodeX.Conv_Ovf_I_Un());
                }
                return;
            case OpCodeConst.Conv_Ovf_U_Un:
                {
                    PushOperation(OpCodeX.Conv_Ovf_U_Un());
                }
                return;
            case OpCodeConst.Box:
                {
                    var type = Method.DeclaringType.Module.ResolveType(ReadStreamHead<int>());
                    PushOperation(OpCodeX.Box(type));
                }
                return;
            case OpCodeConst.Newarr:
                {
                    var type = Method.DeclaringType.Module.ResolveType(ReadStreamHead<int>());
                    PushOperation(OpCodeX.Newarr(type));
                }
                return;
            case OpCodeConst.Ldlen:
                {
                    PushOperation(OpCodeX.Ldlen());
                }
                return;
            case OpCodeConst.Ldelema:
                {
                    var type = Method.DeclaringType.Module.ResolveType(ReadStreamHead<int>());
                    PushOperation(OpCodeX.Ldelema(type));
                }
                return;
            case OpCodeConst.Ldelem_I1:
                {
                    PushOperation(OpCodeX.Ldelem_I1());
                }
                return;
            case OpCodeConst.Ldelem_U1:
                {
                    PushOperation(OpCodeX.Ldelem_U1());
                }
                return;
            case OpCodeConst.Ldelem_I2:
                {
                    PushOperation(OpCodeX.Ldelem_I2());
                }
                return;
            case OpCodeConst.Ldelem_U2:
                {
                    PushOperation(OpCodeX.Ldelem_U2());
                }
                return;
            case OpCodeConst.Ldelem_I4:
                {
                    PushOperation(OpCodeX.Ldelem_I4());
                }
                return;
            case OpCodeConst.Ldelem_U4:
                {
                    PushOperation(OpCodeX.Ldelem_U4());
                }
                return;
            case OpCodeConst.Ldelem_I8:
                {
                    PushOperation(OpCodeX.Ldelem_I8());
                }
                return;
            case OpCodeConst.Ldelem_I:
                {
                    PushOperation(OpCodeX.Ldelem_I());
                }
                return;
            case OpCodeConst.Ldelem_R4:
                {
                    PushOperation(OpCodeX.Ldelem_R4());
                }
                return;
            case OpCodeConst.Ldelem_R8:
                {
                    PushOperation(OpCodeX.Ldelem_R8());
                }
                return;
            case OpCodeConst.Ldelem_Ref:
                {
                    PushOperation(OpCodeX.Ldelem_Ref());
                }
                return;
            case OpCodeConst.Stelem_I:
                {
                    PushOperation(OpCodeX.Stelem_I());
                }
                return;
            case OpCodeConst.Stelem_I1:
                {
                    PushOperation(OpCodeX.Stelem_I1());
                }
                return;
            case OpCodeConst.Stelem_I2:
                {
                    PushOperation(OpCodeX.Stelem_I2());
                }
                return;
            case OpCodeConst.Stelem_I4:
                {
                    PushOperation(OpCodeX.Stelem_I4());
                }
                return;
            case OpCodeConst.Stelem_I8:
                {
                    PushOperation(OpCodeX.Stelem_I8());
                }
                return;
            case OpCodeConst.Stelem_R4:
                {
                    PushOperation(OpCodeX.Stelem_R4());
                }
                return;
            case OpCodeConst.Stelem_R8:
                {
                    PushOperation(OpCodeX.Stelem_R8());
                }
                return;
            case OpCodeConst.Stelem_Ref:
                {
                    PushOperation(OpCodeX.Stelem_Ref());
                }
                return;
            case OpCodeConst.Ldelem:
                {
                    var type = Method.DeclaringType.Module.ResolveType(ReadStreamHead<int>());
                    PushOperation(OpCodeX.Ldelem(type));
                }
                return;
            case OpCodeConst.Stelem:
                {
                    var type = Method.DeclaringType.Module.ResolveType(ReadStreamHead<int>());
                    PushOperation(OpCodeX.Stelem(type));
                }
                return;
            case OpCodeConst.Unbox_Any:
                {
                    var type = Method.DeclaringType.Module.ResolveType(ReadStreamHead<int>());
                    PushOperation(OpCodeX.Unbox_Any(type));
                }
                return;
            case OpCodeConst.Conv_Ovf_I1:
                {
                    PushOperation(OpCodeX.Conv_Ovf_I1());
                }
                return;
            case OpCodeConst.Conv_Ovf_U1:
                {
                    PushOperation(OpCodeX.Conv_Ovf_U1());
                }
                return;
            case OpCodeConst.Conv_Ovf_I2:
                {
                    PushOperation(OpCodeX.Conv_Ovf_I2());
                }
                return;
            case OpCodeConst.Conv_Ovf_U2:
                {
                    PushOperation(OpCodeX.Conv_Ovf_U2());
                }
                return;
            case OpCodeConst.Conv_Ovf_I4:
                {
                    PushOperation(OpCodeX.Conv_Ovf_I4());
                }
                return;
            case OpCodeConst.Conv_Ovf_U4:
                {
                    PushOperation(OpCodeX.Conv_Ovf_U4());
                }
                return;
            case OpCodeConst.Conv_Ovf_I8:
                {
                    PushOperation(OpCodeX.Conv_Ovf_I8());
                }
                return;
            case OpCodeConst.Conv_Ovf_U8:
                {
                    PushOperation(OpCodeX.Conv_Ovf_U8());
                }
                return;
            case OpCodeConst.Refanyval:
                {
                    var type = Method.DeclaringType.Module.ResolveType(ReadStreamHead<int>());
                    PushOperation(OpCodeX.Refanyval(type));
                }
                return;
            case OpCodeConst.Ckfinite:
                {
                    PushOperation(OpCodeX.Ckfinite());
                }
                return;
            case OpCodeConst.Mkrefany:
                {
                    var type = Method.DeclaringType.Module.ResolveType(ReadStreamHead<int>());
                    PushOperation(OpCodeX.Mkrefany(type));
                }
                return;
            case OpCodeConst.Ldtoken:
                {
                    switch(Method.Module.ResolveMember(ReadStreamHead<int>()))
                    {
                    case Type type        : PushOperation(OpCodeX.Ldtoken(type));   break;
                    case MethodInfo method: PushOperation(OpCodeX.Ldtoken(method)); break;
                    case FieldInfo field  : PushOperation(OpCodeX.Ldtoken(field));  break;
                    default               : throw new InvalidOperationException();
                    }
                    throw new NotSupportedException();
                }
                return;
            case OpCodeConst.Conv_U2:
                {
                    PushOperation(OpCodeX.Conv_U2());
                }
                return;
            case OpCodeConst.Conv_U1:
                {
                    PushOperation(OpCodeX.Conv_U1());
                }
                return;
            case OpCodeConst.Conv_I:
                {
                    PushOperation(OpCodeX.Conv_I());
                }
                return;
            case OpCodeConst.Conv_Ovf_I:
                {
                    PushOperation(OpCodeX.Conv_Ovf_I());
                }
                return;
            case OpCodeConst.Conv_Ovf_U:
                {
                    PushOperation(OpCodeX.Conv_Ovf_U());
                }
                return;
            case OpCodeConst.Add_Ovf:
                {
                    PushOperation(OpCodeX.Add_Ovf());
                }
                return;
            case OpCodeConst.Add_Ovf_Un:
                {
                    PushOperation(OpCodeX.Add_Ovf_Un());
                }
                return;
            case OpCodeConst.Mul_Ovf:
                {
                    PushOperation(OpCodeX.Mul_Ovf());
                }
                return;
            case OpCodeConst.Mul_Ovf_Un:
                {
                    PushOperation(OpCodeX.Mul_Ovf_Un());
                }
                return;
            case OpCodeConst.Sub_Ovf:
                {
                    PushOperation(OpCodeX.Sub_Ovf());
                }
                return;
            case OpCodeConst.Sub_Ovf_Un:
                {
                    PushOperation(OpCodeX.Sub_Ovf_Un());
                }
                return;
            case OpCodeConst.Endfinally:
                {
                    PushOperation(OpCodeX.Endfinally());
                }
                return;
            case OpCodeConst.Leave:
                {
                    var offset = ReadStreamHead<int>();
                    PushOperation(OpCodeX.Leave(GetOrAddLabel(currentIndex + OpCodes.Leave.GetTotalByteSize() + offset)));
                }
                return;
            case OpCodeConst.Leave_S:
                {
                    var offset = ReadStreamHead<sbyte>();
                    PushOperation(OpCodeX.Leave_S(GetOrAddLabel(currentIndex + OpCodes.Leave_S.GetTotalByteSize() + offset)));
                }
                return;
            case OpCodeConst.Stind_I:
                {
                    PushOperation(OpCodeX.Stind_I());
                }
                return;
            case OpCodeConst.Conv_U:
                {
                    PushOperation(OpCodeX.Conv_U());
                }
                return;
            case OpCodeConst.Arglist:
                {
                    PushOperation(OpCodeX.Arglist());
                }
                return;
            case OpCodeConst.Ceq:
                {
                    PushOperation(OpCodeX.Ceq());
                }
                return;
            case OpCodeConst.Cgt:
                {
                    PushOperation(OpCodeX.Cgt());
                }
                return;
            case OpCodeConst.Cgt_Un:
                {
                    PushOperation(OpCodeX.Cgt_Un());
                }
                return;
            case OpCodeConst.Clt:
                {
                    PushOperation(OpCodeX.Clt());
                }
                return;
            case OpCodeConst.Clt_Un:
                {
                    PushOperation(OpCodeX.Clt_Un());
                }
                return;
            case OpCodeConst.Ldftn:
                {
                    var meth = (MethodInfo)Method.DeclaringType.Module.ResolveMethod(ReadStreamHead<int>());
                    PushOperation(OpCodeX.Ldftn(meth));
                }
                return;
            case OpCodeConst.Ldvirtftn:
                {
                    var meth = (MethodInfo)Method.DeclaringType.Module.ResolveMethod(ReadStreamHead<int>());
                    PushOperation(OpCodeX.Ldvirtftn(meth));
                }
                return;
            case OpCodeConst.Ldarg:
                {
                    var value = ReadStreamHead<ushort>();
                    PushOperation(OpCodeX.Ldarg(value));
                }
                return;
            case OpCodeConst.Ldarga:
                {
                    var value = ReadStreamHead<ushort>();
                    PushOperation(OpCodeX.Ldarga(value));
                }
                return;
            case OpCodeConst.Starg:
                {
                    var value = ReadStreamHead<ushort>();
                    PushOperation(OpCodeX.Starg(value));
                }
                return;
            case OpCodeConst.Ldloc:
                {
                    var value = ReadStreamHead<ushort>();
                    PushOperation(OpCodeX.Ldloc(value));
                }
                return;
            case OpCodeConst.Ldloca:
                {
                    var value = ReadStreamHead<ushort>();
                    PushOperation(OpCodeX.Ldloca(value));
                }
                return;
            case OpCodeConst.Stloc:
                {
                    var value = ReadStreamHead<ushort>();
                    PushOperation(OpCodeX.Stloc(value));
                }
                return;
            case OpCodeConst.Localloc:
                {
                    PushOperation(OpCodeX.Localloc());
                }
                return;
            case OpCodeConst.Endfilter:
                {
                    PushOperation(OpCodeX.Endfilter());
                }
                return;
            case OpCodeConst.Unaligned:
                {
                    var value = ReadStreamHead<byte>();
                    PushOperation(OpCodeX.Unaligned(value));
                }
                return;
            case OpCodeConst.Volatile:
                {
                    PushOperation(OpCodeX.Volatile());
                }
                return;
            case OpCodeConst.Tailcall:
                {
                    PushOperation(OpCodeX.Tailcall());
                }
                return;
            case OpCodeConst.Initobj:
                {
                    var type = Method.DeclaringType.Module.ResolveType(ReadStreamHead<int>());
                    PushOperation(OpCodeX.Initobj(type));
                }
                return;
            case OpCodeConst.Constrained:
                {
                    var type = Method.DeclaringType.Module.ResolveType(ReadStreamHead<int>());
                    PushOperation(OpCodeX.Constrained(type));
                }
                return;
            case OpCodeConst.Cpblk:
                {
                    PushOperation(OpCodeX.Cpblk());
                }
                return;
            case OpCodeConst.Initblk:
                {
                    PushOperation(OpCodeX.Initblk());
                }
                return;
            case OpCodeConst.Rethrow:
                {
                    PushOperation(OpCodeX.Rethrow());
                }
                return;
            case OpCodeConst.Sizeof:
                {
                    var type = Method.DeclaringType.Module.ResolveType(ReadStreamHead<int>());
                    PushOperation(OpCodeX.Sizeof(type));
                }
                return;
            case OpCodeConst.Refanytype:
                {
                    PushOperation(OpCodeX.Refanytype());
                }
                return;
            case OpCodeConst.Readonly:
                {
                    PushOperation(OpCodeX.Readonly());
                }
                return;
            default:
                throw new NotImplementedException();
            }
        }
    }
}
#pragma warning restore CS0162
